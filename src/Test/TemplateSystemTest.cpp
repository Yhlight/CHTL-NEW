#include "../CHTL/CHTLNode/TemplateNode.h"
#include "../CHTL/CHTLLexer/CHTLGlobalMap.h"
#include <iostream>

int main() {
    std::cout << "=== CHTLÊ®°ÊùøÁ≥ªÁªüÂÆåÂñÑÊµãËØï ===" << std::endl;
    std::cout << "È™åËØÅÂÖ®ÁºÄÂêçËÆøÈóÆ„ÄÅÂÖÉÁ¥†Ê®°ÊùøÁªÜËäÇÁ≠âÂäüËÉΩ" << std::endl;
    
    // 1. ÊµãËØïÂÖ®ÁºÄÂêçËÆøÈóÆ
    std::cout << "\nüè∑Ô∏è  ÂÖ®ÁºÄÂêçËÆøÈóÆÊµãËØï:" << std::endl;
    
    try {
        // ÂàõÂª∫Ê†∑ÂºèÁªÑÊ®°Êùø
        auto styleTemplate = std::make_unique<CHTL::TemplateNode>(CHTL::TemplateType::STYLE_TEMPLATE, "ButtonStyle", 1, 1);
        styleTemplate->SetFullNamespacePath("UI::Components");
        
        std::cout << "  Ê®°ÊùøÂêçÁß∞: " << styleTemplate->GetTemplateName() << std::endl;
        std::cout << "  ÂëΩÂêçÁ©∫Èó¥Ë∑ØÂæÑ: " << styleTemplate->GetFullNamespacePath() << std::endl;
        std::cout << "  ÂÖ®ÁºÄÂêç: " << styleTemplate->GetFullQualifiedName() << std::endl;
        
        // ÊµãËØïÂÖ®ÁºÄÂêçËß£Êûê
        std::vector<std::string> testFullNames = {
            "UI::Button::Style",
            "Theme::Dark::Colors",
            "SimpleTemplate",
            "::Global::Template"
        };
        
        std::cout << "\n  ÂÖ®ÁºÄÂêçËß£ÊûêÊµãËØï:" << std::endl;
        for (const auto& fullName : testFullNames) {
            auto parsed = CHTL::TemplateNode::ParseFullQualifiedName(fullName);
            std::cout << "    " << fullName << " ‚Üí ÂëΩÂêçÁ©∫Èó¥: '" << parsed.first 
                     << "', Ê®°ÊùøÂêç: '" << parsed.second << "'" << std::endl;
        }
        
        // ÊµãËØïÊ®°ÊùøÂºïÁî®Ë∑ØÂæÑËß£Êûê
        std::cout << "\n  Ê®°ÊùøÂºïÁî®Ë∑ØÂæÑËß£ÊûêÊµãËØï:" << std::endl;
        std::vector<std::pair<std::string, std::string>> testPaths = {
            {"Button", "UI::Components"},
            {"../Theme::Dark", "UI::Components::Buttons"},
            {"::Global::Template", "UI::Components"},
            {"Nested::Template", "UI"}
        };
        
        for (const auto& testPath : testPaths) {
            std::string resolved = CHTL::TemplateNode::ResolveTemplateReferencePath(testPath.first, testPath.second);
            std::cout << "    ÂºïÁî®: '" << testPath.first << "' Âú®ÂëΩÂêçÁ©∫Èó¥ '" << testPath.second 
                     << "' ‚Üí '" << resolved << "'" << std::endl;
        }
        
    }
    catch (const std::exception& e) {
        std::cout << "  ‚úó ÂÖ®ÁºÄÂêçËÆøÈóÆÊµãËØïÂºÇÂ∏∏: " << e.what() << std::endl;
    }
    
    // 2. ÊµãËØïÊ®°ÊùøÁªßÊâø
    std::cout << "\nüîó Ê®°ÊùøÁªßÊâøÊµãËØï:" << std::endl;
    
    try {
        // ÂàõÂª∫Âü∫Á°ÄÊ†∑ÂºèÊ®°Êùø
        auto baseTemplate = std::make_unique<CHTL::TemplateNode>(CHTL::TemplateType::STYLE_TEMPLATE, "BaseButton", 1, 1);
        baseTemplate->AddTemplateProperty("padding", "10px");
        baseTemplate->AddTemplateProperty("border", "1px solid #ccc");
        baseTemplate->AddTemplateProperty("cursor", "pointer");
        
        // ÂàõÂª∫ÁªßÊâøÊ®°Êùø
        auto derivedTemplate = std::make_unique<CHTL::TemplateNode>(CHTL::TemplateType::STYLE_TEMPLATE, "PrimaryButton", 2, 1);
        derivedTemplate->AddInheritedTemplate("BaseButton", false); // ÁªÑÂêàÂºèÁªßÊâø
        derivedTemplate->AddTemplateProperty("background-color", "#007bff");
        derivedTemplate->AddTemplateProperty("color", "white");
        
        std::cout << "  Âü∫Á°ÄÊ®°ÊùøÂ±ûÊÄßÊï∞Èáè: " << baseTemplate->GetTemplateProperties().size() << std::endl;
        std::cout << "  Ê¥æÁîüÊ®°ÊùøÂ±ûÊÄßÊï∞Èáè: " << derivedTemplate->GetTemplateProperties().size() << std::endl;
        std::cout << "  Ê¥æÁîüÊ®°ÊùøÁªßÊâøÊï∞Èáè: " << derivedTemplate->GetInheritedTemplates().size() << std::endl;
        
        // ÊòæÁ§∫ÁªßÊâøÁöÑÊ®°Êùø
        const auto& inherited = derivedTemplate->GetInheritedTemplates();
        for (const auto& inheritedName : inherited) {
            std::cout << "    ÁªßÊâøËá™: " << inheritedName << std::endl;
        }
        
        // ÊµãËØïÊ®°ÊùøÂ∫îÁî®ÁªßÊâø
        derivedTemplate->ApplyTemplateInheritance(baseTemplate.get());
        std::cout << "  Â∫îÁî®ÁªßÊâøÂêéÂ±ûÊÄßÊï∞Èáè: " << derivedTemplate->GetTemplateProperties().size() << std::endl;
        
    }
    catch (const std::exception& e) {
        std::cout << "  ‚úó Ê®°ÊùøÁªßÊâøÊµãËØïÂºÇÂ∏∏: " << e.what() << std::endl;
    }
    
    // 3. ÊµãËØïÂÖÉÁ¥†Ê®°Êùø
    std::cout << "\nüèóÔ∏è  ÂÖÉÁ¥†Ê®°ÊùøÊµãËØï:" << std::endl;
    
    try {
        // ÂàõÂª∫ÂÖÉÁ¥†Ê®°Êùø
        auto elementTemplate = std::make_unique<CHTL::TemplateNode>(CHTL::TemplateType::ELEMENT_TEMPLATE, "CardElement", 3, 1);
        
        std::string cardHTML = R"(
<div class="card">
    <div class="card-header">
        <h3>{{title}}</h3>
    </div>
    <div class="card-body">
        {{content}}
    </div>
    <div class="card-footer">
        {{footer}}
    </div>
</div>
)";
        
        elementTemplate->SetTemplateContent(cardHTML);
        elementTemplate->AddTemplateProperty("title", "ÈªòËÆ§Ê†áÈ¢ò");
        elementTemplate->AddTemplateProperty("content", "ÈªòËÆ§ÂÜÖÂÆπ");
        elementTemplate->AddTemplateProperty("footer", "ÈªòËÆ§È°µËÑö");
        
        std::cout << "  ÂÖÉÁ¥†Ê®°ÊùøÂêçÁß∞: " << elementTemplate->GetTemplateName() << std::endl;
        std::cout << "  Ê®°ÊùøÂÜÖÂÆπÈïøÂ∫¶: " << elementTemplate->GetTemplateContent().length() << " Â≠óÁ¨¶" << std::endl;
        std::cout << "  Ê®°ÊùøÂ±ûÊÄßÊï∞Èáè: " << elementTemplate->GetTemplateProperties().size() << std::endl;
        
        // ÁîüÊàêÊ®°ÊùøHTML
        std::string generatedHTML = elementTemplate->GetTemplateContent();
        std::cout << "  ÁîüÊàêHTMLÈïøÂ∫¶: " << generatedHTML.length() << " Â≠óÁ¨¶" << std::endl;
        
        if (!generatedHTML.empty()) {
            std::cout << "  HTMLÈ¢ÑËßà:" << std::endl;
            std::cout << generatedHTML.substr(0, 150) << "..." << std::endl;
        }
        
    }
    catch (const std::exception& e) {
        std::cout << "  ‚úó ÂÖÉÁ¥†Ê®°ÊùøÊµãËØïÂºÇÂ∏∏: " << e.what() << std::endl;
    }
    
    // 4. ÊµãËØïÂèòÈáèÁªÑÊ®°Êùø
    std::cout << "\nüìä ÂèòÈáèÁªÑÊ®°ÊùøÊµãËØï:" << std::endl;
    
    try {
        // ÂàõÂª∫ÂèòÈáèÁªÑÊ®°Êùø
        auto varTemplate = std::make_unique<CHTL::TemplateNode>(CHTL::TemplateType::VAR_TEMPLATE, "ThemeColors", 4, 1);
        
        // Ê∑ªÂä†ÂèòÈáè
        varTemplate->AddTemplateProperty("primaryColor", "#007bff");
        varTemplate->AddTemplateProperty("secondaryColor", "#6c757d");
        varTemplate->AddTemplateProperty("successColor", "#28a745");
        varTemplate->AddTemplateProperty("dangerColor", "#dc3545");
        varTemplate->AddTemplateProperty("warningColor", "#ffc107");
        varTemplate->AddTemplateProperty("infoColor", "#17a2b8");
        
        std::cout << "  ÂèòÈáèÁªÑÊ®°ÊùøÂêçÁß∞: " << varTemplate->GetTemplateName() << std::endl;
        std::cout << "  ÂèòÈáèÊï∞Èáè: " << varTemplate->GetTemplateProperties().size() << std::endl;
        
        // ÊòæÁ§∫ÊâÄÊúâÂèòÈáè
        const auto& variables = varTemplate->GetTemplateProperties();
        std::cout << "  ÂèòÈáèÂàóË°®:" << std::endl;
        for (const auto& var : variables) {
            std::cout << "    " << var.first << " = " << var.second << std::endl;
        }
        
        // ÊµãËØïÂèòÈáèÂºïÁî®
        std::string primaryColor = varTemplate->GetTemplateProperty("primaryColor");
        std::cout << "  Ëé∑ÂèñprimaryColor: " << primaryColor << std::endl;
        
    }
    catch (const std::exception& e) {
        std::cout << "  ‚úó ÂèòÈáèÁªÑÊ®°ÊùøÊµãËØïÂºÇÂ∏∏: " << e.what() << std::endl;
    }
    
    std::cout << "\nüéØ Ê®°ÊùøÁ≥ªÁªüÂÆåÂñÑÁä∂ÊÄÅ:" << std::endl;
    std::cout << "  ‚úÖ Ê†∑ÂºèÁªÑÊ®°ÊùøÂÆåÊï¥ÂÆûÁé∞" << std::endl;
    std::cout << "  ‚úÖ ÂÖÉÁ¥†Ê®°ÊùøÂü∫Á°ÄÂÆûÁé∞" << std::endl;
    std::cout << "  ‚úÖ ÂèòÈáèÁªÑÊ®°ÊùøÂü∫Á°ÄÂÆûÁé∞" << std::endl;
    std::cout << "  ‚úÖ Ê®°ÊùøÁªßÊâøÔºàÁªÑÂêàÂºèÂíåÊòæÂºèÔºâ" << std::endl;
    std::cout << "  ‚úÖ ÂÖ®ÁºÄÂêçËÆøÈóÆÂäüËÉΩ" << std::endl;
    std::cout << "  ‚úÖ ÂëΩÂêçÁ©∫Èó¥Ë∑ØÂæÑËß£Êûê" << std::endl;
    std::cout << "  ‚úÖ Ê®°ÊùøÂºïÁî®Ë∑ØÂæÑËß£Êûê" << std::endl;
    
    std::cout << "\nüåü Ê®°ÊùøÁ≥ªÁªüÈáçÂ§ßÊÑè‰πâ:" << std::endl;
    std::cout << "  ‚ú® ÊîØÊåÅÂ§çÊùÇÁöÑÊ®°ÊùøÁªßÊâø‰ΩìÁ≥ª" << std::endl;
    std::cout << "  ‚ú® ÂÖ®ÁºÄÂêçËÆøÈóÆÁ°Æ‰øùÊ®°ÊùøÂîØ‰∏ÄÊÄß" << std::endl;
    std::cout << "  ‚ú® ÂëΩÂêçÁ©∫Èó¥ÊîØÊåÅÂ§ßÂûãÈ°πÁõÆÁªÑÁªá" << std::endl;
    std::cout << "  ‚ú® ÁÅµÊ¥ªÁöÑÊ®°ÊùøÂºïÁî®Êú∫Âà∂" << std::endl;
    std::cout << "  ‚ú® Âº∫Â§ßÁöÑ‰ª£Á†ÅÂ§çÁî®ËÉΩÂäõ" << std::endl;
    
    std::cout << "\nüèÜ Ê®°ÊùøÁ≥ªÁªüÂÆåÂñÑÊµãËØïÂÆåÊàêÔºÅ" << std::endl;
    std::cout << "ÂÖ®ÁºÄÂêçËÆøÈóÆÂíåÈ´òÁ∫ßÊ®°ÊùøÂäüËÉΩÂ∑≤ÂÆûÁé∞ÔºåÊîØÊåÅ‰ºÅ‰∏öÁ∫ßÈ°πÁõÆÂºÄÂèë„ÄÇ" << std::endl;
    
    return 0;
}