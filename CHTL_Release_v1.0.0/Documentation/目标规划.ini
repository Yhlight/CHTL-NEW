全程使用中文模式，阅读CHTL语法文档，基于该文档创建指定架构。开发过程中需遵循以下要求：使用C++ 17编程语言，全程依据我的具体指示进行开发；不建议多个编译器共用文件，应确保每个编译器对应一套独立文件；每次开发任务均需提供完整实现，且任务完成后项目需能够直接编译成功。

┌─────────────────────────────────────────────────────────────────┐
│                         CHTL源代码                               │
└─────────────────────────────┬───────────────────────────────────┘
                              │
                              ▼
┌─────────────────────────────────────────────────────────────────┐
│                    CHTLUnifiedScanner                           │
│                   (精准代码切割器)                               │
└─────────────────────────────┬───────────────────────────────────┘
                              │
                              ▼
        ┌──────────────┬──────────────┬──────────────┬────────────┐
        │   CHTL片段   │ CHTL JS片段  │   CSS片段    │   JS片段   │
        └──────┬───────┴──────┬───────┴──────┬───────┴──────┬─────┘
               │              │              │              │
               ▼              ▼              ▼              ▼
┌─────────────────────────────────────────────────────────────────┐
│                    CompilerDispatcher                           │
│                   (编译器调度器)                                 │
└──────┬──────────────┬──────────────┬──────────────┬────────────┘
       │              │              │              │
       ▼              ▼              ▼              ▼
┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐
│    CHTL     │ │   CHTL JS   │ │     CSS     │ │JavaScript   │
│  Compiler   │ │  Compiler   │ │  Compiler   │ │  Compiler   │
│  (手写)     │ │  (手写)     │ │  (ANTLR)    │ │  (ANTLR)    │
└─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘
       │              │              │              │
       └──────────────┴──────────────┴──────────────┘
                              ▼
                     ┌───────────
                     │编译结果合并│
                     │(HTML输出)│
                     └──────────

编译器对应关系说明如下：
- 局部样式（style）→ CHTL编译器
- 全局样式（style）→ CSS编译器
- 脚本（script）→ 由CHTL编译器、CHTL JS编译器及JS编译器共同管理

重要提示：扫描器是该统一架构的核心基础组件，其工作机制需基于可变长度切片实现。具体流程如下：
1. 扫描器单次读取一个代码片段后，需检查下一个片段的起始部分是否可能与当前片段组成完整的CHTL或CHTL JS代码片段。
2. 若判定为可组成完整片段，则表明当前截断位置不合理，需向前扩增指定长度的切片范围。
3. 若截断位置合理，则对切片按CHTL/CHTL JS的最小语法单元进行二次切割，以确保切割结果的绝对精确性。例如，`{{box}}->click` 需被切割为 `{{box}}->` 与 `click` 两个单元。

特别说明：尽管CHTL及CHTL JS代码需以最小语法单元为切割标准，但切割过程仍需结合上下文信息，避免过度细分导致代码片段过小。应确保多个连续的CHTL/CHTL JS代码片段保持适当聚合，而非全部拆解为最小单元。该机制可使JS编译器与CSS编译器在无需额外特殊处理的情况下，原生支持CHTL及CHTL JS的语法特征。相关技术约束将在后续文档中详细说明。

下一步，回顾所有已创建文件及原有架构，严格依据《CHTL语法文档.md》规范（禁止私自扩展语法或出现偏差），执行以下任务以完善CHTL和CHTL JS编译器功能，并确保所有实现可正常运行：

1. 完善Token、GlobalMap、State、Context及Lexer模块，完成编译测试验证。

2. 实现CHTL和CHTL JS的AST节点定义。

3. 创建任务清单（todo列表），开发CHTL与CHTL JS的解析器及生成器。

4. 设计基于RAII自动化管理模式的状态机与上下文管理协助器，用于标记AST节点状态，为解析器和生成器提供精确状态支持，并将此模式集成至编译器，与扫描器协同工作。

5. 增强Import功能，修正同一路径多表达方式、循环依赖及重复导入问题，并按以下规则处理各类导入语法：
   - **@Html、@Style、@JavaScript导入**：
     - 无`as`语法时直接跳过；
     - 有`as`语法时，创建对应类型的带名原始嵌入节点；
     - 路径处理：
       - 文件名（不带后缀）：在编译文件所在目录（非递归）按类型搜索相关文件；
       - 具体文件名（带后缀）：在编译文件所在目录（非递归）直接搜索该文件；
       - 路径为文件夹或不包含具体文件信息时，触发报错。
   - **@Chtl导入**：
     - 名称（不带后缀）：优先搜索官方模块目录（源码编译后生成的module文件夹，含cmod和cjmod文件），其次搜索当前目录module文件夹，最后搜索当前目录，均优先匹配cmod文件；
     - 具体名称（带后缀）：按官方模块目录→当前目录module文件夹→当前目录顺序搜索指定文件；
     - 具体路径（含文件信息）：直接按路径查找，未找到则报错；
     - 具体路径（不含文件信息）：触发报错。
   - **@CJmod导入**：
     - 名称（不带后缀）：优先搜索官方模块目录，其次搜索当前目录module文件夹，最后搜索当前目录，仅匹配cjmod文件；
     - 具体名称（带后缀）：按官方模块目录→当前目录module文件夹→当前目录顺序搜索指定文件；
     - 具体路径（含文件信息）：直接按路径查找，未找到则报错；
     - 具体路径（不含文件信息）：触发报错。

[Import] @Chtl from 具体路径.*  // 导入具体路径下的所有.cmod和.chtl文件
[Import] @Chtl from 具体路径.*.cmod  // 导入具体路径下的所有.cmod文件
[Import] @Chtl from 具体路径.*.chtl  // 导入具体路径下的所有.chtl文件
等价于
[Import] @Chtl from 具体路径/*  // 导入具体路径下的所有.cmod和.chtl文件
[Import] @Chtl from 具体路径/*.cmod  // 导入具体路径下的所有.cmod文件
[Import] @Chtl from 具体路径/*.chtl  // 导入具体路径下的所有.chtl文件

// 导入子模块时，支持使用'/'替代'.'作为路径分隔符
[Import] @Chtl from Chtholly.*  // 导入Chtholly模块的所有子模块
[Import] @Chtl from Chtholly.Space  // 导入Chtholly模块中指定的Space子模块

[Import] @CJmod from 模块名称  // 导入指定名称的CJmod模块

CJmod与Cmod采用相同的路径搜索策略。

命名空间功能增强说明：
1. 实现同名命名空间自动合并机制；
2. 集成命名空间冲突检测策略。

Cmod体系实现要求：
1. 回顾历史文件及原有架构设计；
2. 严格遵循《CHTL语法文档.md》规范，禁止语法扩展或偏差；
3. 功能包括但不限于：
   - 打包符合格式要求的文件夹为Cmod；
   - 解包Cmod文件夹；
   - 支持引入外部库（如Zip库），最好手写Zip库；
4. 将上述功能集成至编译器。

CJmod体系实现要求：
1. 回顾历史文件及原有架构设计；
2. 严格遵循《CHTL语法文档.md》规范，禁止语法扩展或偏差；
3. 功能包括但不限于：
   - 打包符合格式要求的文件夹为CJmod；
   - 解包CJmod文件夹；
   - 支持引入外部库（如Zip库），最好手写Zip库；
4. 将上述功能集成至编译器。

CJmod体系说明：
- CJmod是开发者通过CHTL JS编译器暴露接口扩展CHTL JS功能的核心体系，为CHTL编程语言的重要组成部分；
- 开发者需使用C++语言开发CJmod，通过预设方法及接口实现自定义JS语法扩展（类比V8引擎扩展机制）。

模块命名规范：
- 创建官方模块前缀"chtl::"，允许[Import]通过"chtl::模块名"显式引用官方模块。

回顾原先创建的所有文件与原有架构，严格依据《CHTL语法文档.md》中的语法规范（禁止私自扩展或出现语法偏差），将任务划分为8个工作待办事项（Todo），列出全部待办并完整完成第一部分Todo，实现语法的解析与生成。

回顾原先创建的所有文件与原有架构，严格依据《CHTL语法文档.md》中的语法规范（禁止私自扩展或出现语法偏差），借助状态机、扫描器及上下文机制，完整完成第二部分Todo，实现语法的解析与生成。

回顾原先创建的所有文件与原有架构，严格依据《CHTL语法文档.md》中的语法规范（禁止私自扩展或出现语法偏差），借助状态机、扫描器及上下文机制，完整完成第三部分Todo，实现语法的解析与生成。

回顾原先创建的所有文件与原有架构，严格依据《CHTL语法文档.md》中的语法规范（禁止私自扩展或出现语法偏差），借助状态机、扫描器及上下文机制，完整完成第四部分Todo，实现语法的解析与生成。

回顾原先创建的所有文件与原有架构，严格依据《CHTL语法文档.md》中的语法规范（禁止私自扩展或出现语法偏差），借助状态机、扫描器及上下文机制，完整完成第五部分Todo，实现语法的解析与生成。

回顾原先创建的所有文件与原有架构，严格依据《CHTL语法文档.md》中的语法规范（禁止私自扩展或出现语法偏差），借助状态机、扫描器及上下文机制，完整完成第六部分Todo，实现语法的解析与生成。

回顾原先创建的所有文件与原有架构，严格依据《CHTL语法文档.md》中的语法规范（禁止私自扩展或出现语法偏差），借助状态机、扫描器及上下文机制，完整完成第七部分Todo，实现语法的解析与生成。

回顾原先创建的所有文件与原有架构，严格依据《CHTL语法文档.md》中的语法规范（禁止私自扩展或出现语法偏差），借助状态机、扫描器及上下文机制，完整完成第八部分Todo，实现语法的解析与生成。

回顾原先创建的所有文件与原有架构，基于已编写的状态机、上下文等架构，结合《CHTL语法文档.md》，实现CHTL语法的解析与生成功能，确保每个Todo在完成时解决所有问题，无遗留项。

回顾原先创建的所有文件与原有架构，下一步任务为构建约束器，明确CHTL与CHTL JS语法的边界。其中，全局样式块仅允许使用以下语法元素：模板变量、自定义变量、自定义变量特例化、模板样式组、自定义样式组、无值样式组、自定义样式组特例化、delete属性、delete继承、样式组间继承、生成器注释、全缀名、任意类型原始嵌入（原始嵌入可在任意位置使用），以及通过命名空间引入模板变量、自定义变量、模板样式组、自定义样式组、无值样式组（即from语法，具体需参考文档及上述规则）。

回顾原先创建的所有文件与原有架构，除局部script外，其他script禁止使用任何CHTL语法（通常包括模板变量、自定义变量组、变量组特例化、命名空间from），允许例外的元素为：注释及任意类型原始嵌入（二者为特殊存在，可在任意位置使用）。

回顾原先创建的所有文件与原有架构，局部样式块允许使用以下语法元素：模板变量、自定义变量、自定义变量特例化、模板样式组、自定义样式组、无值样式组、自定义样式组特例化、delete属性、delete继承、样式组间继承、生成器注释、全缀名、任意类型原始嵌入（原始嵌入可在任意位置使用），以及通过命名空间引入模板变量、自定义变量、模板样式组、自定义样式组、无值样式组。

回顾原先创建的所有文件与原有架构，局部script允许使用以下CHTL语法元素：模板变量、自定义变量组、变量组特例化、命名空间from、注释及任意类型原始嵌入（注释和原始嵌入为特殊存在，可在任意位置使用）。注意：{{&}}等特供语法属于CHTL本身功能，不应误禁。

回顾原先创建的所有文件与原有架构，严格依据《CHTL语法文档.md》中的语法规范（即上述语法），禁止私自扩展或出现语法偏差，完成以下任务：

1. 下载ANTLR4源代码，手动构建ANTLR4，生成Linux和Windows平台的文件，并将其作为包含包传入仓库中。
2. 使用ANTLR4完成CSS和JS编译器的代码编写。