# CHTL编译器交叉编译配置 (Linux -> Windows)
cmake_minimum_required(VERSION 3.16)
project(CHTL_Compiler_Cross)

# 设置交叉编译工具链
set(CMAKE_SYSTEM_NAME Windows)
set(CMAKE_C_COMPILER x86_64-w64-mingw32-gcc)
set(CMAKE_CXX_COMPILER x86_64-w64-mingw32-g++)
set(CMAKE_RC_COMPILER x86_64-w64-mingw32-windres)

# 设置C++标准
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 设置编译选项
add_compile_options(-finput-charset=UTF-8 -fexec-charset=UTF-8)
add_compile_definitions(UNICODE _UNICODE)

# 输出目录
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# ANTLR4配置 (使用用户提供的Windows库)
set(ANTLR4_ROOT ${CMAKE_SOURCE_DIR}/src/ThirdParty/ANTLR4)
set(ANTLR4_INCLUDE_DIRS ${ANTLR4_ROOT}/include)
set(ANTLR4_LIBRARIES ${ANTLR4_ROOT}/lib/antlr4-runtime-static.lib)

include_directories(${ANTLR4_INCLUDE_DIRS})
include_directories(src)

# 核心源文件 (简化版本，专注核心功能)
set(CORE_SOURCES
    src/CHTL/CHTLLexer/CHTLToken.cpp
    src/CHTL/CHTLLexer/CHTLGlobalMap.cpp
    src/CHTL/CHTLLexer/CHTLLexer.cpp
    src/CHTL/CHTLState/CHTLState.cpp
    src/CHTL/CHTLContext/CHTLContext.cpp
    src/CHTL/CHTLNode/CHTLBaseNode.cpp
    src/CHTL/CHTLNode/ElementNode.cpp
    src/CHTL/CHTLNode/TextNode.cpp
    src/CHTL/CHTLParser/CHTLParser.cpp
    src/CHTL/CHTLGenerator/CHTLGenerator.cpp
)

set(CHTLJS_SOURCES
    "src/CHTL JS/CHTLJSLexer/CHTLJSToken.cpp"
    "src/CHTL JS/CHTLJSLexer/CHTLJSLexer.cpp"
    "src/CHTL JS/CHTLJSParser/CHTLJSParser.cpp"
    "src/CHTL JS/CHTLJSGenerator/CHTLJSGenerator.cpp"
)

set(CJMOD_SOURCES
    "src/CHTL JS/CJMODSystem/CJMODCore.cpp"
    "src/CHTL JS/CJMODSystem/CJMODIntegration.cpp"
    "src/CHTL JS/CJMODSystem/ChthollyOfficialModule.cpp"
)

set(SCANNER_SOURCES
    src/Scanner/CHTLUnifiedScanner.cpp
)

set(DISPATCHER_SOURCES
    src/CompilerDispatcher/CompilerDispatcher.cpp
)

set(MERGER_SOURCES
    src/CodeMerger/CHTLCodeMerger.cpp
)

# 创建库
add_library(CHTLCore STATIC ${CORE_SOURCES})
add_library(CHTLJSCore STATIC ${CHTLJS_SOURCES})
add_library(CJMOD STATIC ${CJMOD_SOURCES})
add_library(CHTLScanner STATIC ${SCANNER_SOURCES})
add_library(CHTLMerger STATIC ${MERGER_SOURCES})
add_library(CHTLDispatcher STATIC ${DISPATCHER_SOURCES})

# 设置包含目录
target_include_directories(CHTLCore PUBLIC src/CHTL)
target_include_directories(CHTLJSCore PUBLIC "src/CHTL JS")
target_include_directories(CJMOD PUBLIC "src/CHTL JS/CJMODSystem")
target_include_directories(CHTLScanner PUBLIC src/Scanner)
target_include_directories(CHTLMerger PUBLIC src/CodeMerger)
target_include_directories(CHTLDispatcher PUBLIC src/CompilerDispatcher)

# 链接库
target_link_libraries(CHTLDispatcher CJMOD CHTLCore CHTLJSCore CHTLScanner CHTLMerger)

# 主程序
add_executable(chtl src/main.cpp)
target_link_libraries(chtl CHTLDispatcher)

# Windows特定设置
if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    set_target_properties(chtl PROPERTIES
        WIN32_EXECUTABLE FALSE
    )
    
    # 静态链接运行时
    target_link_options(chtl PRIVATE -static-libgcc -static-libstdc++ -static)
endif()

message(STATUS "交叉编译配置完成 (Linux -> Windows)")
message(STATUS "目标系统: Windows")
message(STATUS "编译器: MinGW-w64")
message(STATUS "ANTLR4库: ${ANTLR4_LIBRARIES}")