// CJMOD API综合展示
// 展示所有CJMOD API的强大功能组合使用
// 严格按照CJMOD.md实现

[Import] @CJmod from "comprehensive_api"
[Import] @CJmod from "advanced_placeholders"
[Import] @CJmod from "virtual_object_system"

[Configuration]
{
    CJMOD_DOUBLE_POINTER_SCAN = true;
    CJMOD_PREFIX_CUT_SCAN = true;
    CJMOD_SMART_SCAN = true;
    ENABLE_CONTEXT_DEDUCTION = true;
    CJMOD_VIR_SUPPORT = true;
    CJMOD_UNQUOTED_STRING_SUPPORT = true;
}

html
{
    head
    {
        title
        {
            text
            {
                CJMOD API综合功能展示
            }
        }
    }
    
    body
    {
        div
        {
            id: cjmod-showcase;
            class: api-showcase;
            
            text
            {
                🔥 CJMOD - CHTL极为强大的特征展示
            }
            
            script
            {
                // ==========================================
                // 1. CJMOD Syntax API 完整展示
                // ==========================================
                
                console.log('🔥 CJMOD Syntax API 展示');
                
                // 语法分析能力
                vir mathSyntax = Syntax.analyze('$ ** $ + $ * $');
                console.log('复杂数学语法分析:', mathSyntax);
                
                vir conditionalSyntax = Syntax.analyze('if $! then $!_ else $?_ finally $?_');
                console.log('条件语法分析:', conditionalSyntax);
                
                vir chainSyntax = Syntax.analyze('$ -> $ -> $ -> $');
                console.log('链式语法分析:', chainSyntax);
                
                // 语法检测能力
                console.log('对象检测:', Syntax.isObject('{name: "CHTL", version: "1.0"}'));
                console.log('函数检测:', Syntax.isFunction('function calculate(x, y) { return x ** y; }'));
                console.log('数组检测:', Syntax.isArray('[1, 2, 3, 4, 5]'));
                console.log('CHTL JS函数检测:', Syntax.isCHTLJSFunction('calculate {base: $!, exp: $?}'));
                
                // ==========================================
                // 2. CJMOD Arg API 完整展示
                // ==========================================
                
                console.log('\n🔧 CJMOD Arg API 展示');
                
                // 创建复杂参数模式
                vir complexArgs = Syntax.analyze('$!_ ** $?_ + $_ * ... - $!');
                
                // 绑定强大的处理函数
                complexArgs.bind('$!_', function(value) {
                    return value || 'defaultRequired';
                });
                
                complexArgs.bind('$?_', function(value) {
                    return value || 'defaultOptional';
                });
                
                complexArgs.bind('$_', function(value) {
                    return 'unordered:' + value;
                });
                
                complexArgs.bind('...', function(value) {
                    return 'variadic:[' + value + ']';
                });
                
                complexArgs.bind('$!', function(value) {
                    return 'required:' + value;
                });
                
                // ==========================================
                // 3. CJMOD Scanner API 完整展示
                // ==========================================
                
                console.log('\n🔍 CJMOD Scanner API 展示');
                
                // 双指针扫描法演示
                vir doublePointerResult = CJMODScanner.scan(complexArgs, '**');
                console.log('双指针扫描结果:', doublePointerResult);
                
                // 前置截取法演示
                vir prefixCutResult = CJMODScanner.scan(complexArgs, 'then');
                console.log('前置截取结果:', prefixCutResult);
                
                // 智能扫描演示
                vir smartScanResult = CJMODScanner.scan(complexArgs);
                console.log('智能扫描结果:', smartScanResult);
                
                // ==========================================
                // 4. CJMOD Generator API 完整展示
                // ==========================================
                
                console.log('\n⚡ CJMOD Generator API 展示');
                
                // 填充扫描结果
                complexArgs.fillValue(doublePointerResult);
                console.log('填充后参数值:');
                for (let i = 0; i < complexArgs.length; i++) {
                    console.log('  arg[' + i + '].value:', complexArgs[i].value);
                }
                
                // 复杂转换
                complexArgs.transform(
                    'Math.pow(' + complexArgs[0].value + ', ' + complexArgs[2].value + ') + ' +
                    'Math.multiply(' + complexArgs[4].value + ', ' + complexArgs[6].value + ') - ' +
                    complexArgs[8].value
                );
                
                // 导出最终代码
                vir finalJSCode = CJMODGenerator.exportResult(complexArgs);
                console.log('最终生成的JS代码:', finalJSCode);
                
                // ==========================================
                // 5. CHTLJSFunction API 完整展示
                // ==========================================
                
                console.log('\n🌸 CHTLJSFunction API 展示');
                
                // 创建多个强大的CHTL JS函数
                vir mathFunc = CHTLJSFunction.CreateCHTLJSFunction(
                    'advancedMath {operation: $!_, operands: ..., precision: $?_, callback: $?_}'
                );
                
                vir dataFunc = CHTLJSFunction.CreateCHTLJSFunction(
                    'processAdvancedData {input: $!_, transform: $?_, validate: $?_, output: $!_}'
                );
                
                vir eventFunc = CHTLJSFunction.CreateCHTLJSFunction(
                    'handleComplexEvent {target: $!_, events: ..., options: $?_, callback: $?_}'
                );
                
                console.log('数学函数:', mathFunc.getFunctionName(), '支持vir:', mathFunc.supportsVir());
                console.log('数据函数:', dataFunc.getFunctionName(), '支持vir:', dataFunc.supportsVir());
                console.log('事件函数:', eventFunc.getFunctionName(), '支持vir:', eventFunc.supportsVir());
                
                // 手动绑定更多虚对象支持
                CHTLJSFunction.bindVirtualObject('customProcessor');
                CHTLJSFunction.bindVirtualObject('advancedCalculator');
                CHTLJSFunction.bindVirtualObject('intelligentAnalyzer');
                
                console.log('customProcessor支持vir:', CHTLJSFunction.supportsVirtualObject('customProcessor'));
                console.log('advancedCalculator支持vir:', CHTLJSFunction.supportsVirtualObject('advancedCalculator'));
                console.log('intelligentAnalyzer支持vir:', CHTLJSFunction.supportsVirtualObject('intelligentAnalyzer'));
                
                // ==========================================
                // 6. 综合使用演示
                // ==========================================
                
                {{.api-showcase}} -> click {
                    console.log('🚀 CJMOD API综合使用演示');
                    
                    // 步骤1: 语法分析
                    vir pattern = Syntax.analyze('$ -> $ -> $ then $');
                    
                    // 步骤2: 绑定函数
                    pattern.bind('$', function(value) { return value; });
                    pattern.bind('->', function(value) { return '.then'; });
                    pattern.bind('then', function(value) { return '.finally'; });
                    
                    // 步骤3: 扫描（双指针+前置截取）
                    vir scanResult1 = CJMODScanner.scan(pattern, '->');  // 双指针扫描
                    vir scanResult2 = CJMODScanner.scan(pattern, 'then'); // 前置截取
                    
                    // 步骤4: 填充和转换
                    pattern.fillValue(scanResult1);
                    pattern.transform('Promise.resolve(' + pattern[0].value + ')' +
                                    pattern[1].value + '(' + pattern[2].value + ')' +
                                    pattern[3].value + '(' + pattern[4].value + ')' +
                                    pattern[5].value + '(' + pattern[6].value + ')');
                    
                    // 步骤5: 导出
                    vir result = CJMODGenerator.exportResult(pattern);
                    console.log('综合使用结果:', result);
                    
                    // 步骤6: 使用天然支持vir的函数
                    vir finalResult = advancedMath({
                        operation: power,
                        operands: [2, 3, 4],
                        precision: 2,
                        callback: function(result) {
                            console.log('计算完成:', result);
                        }
                    });
                    
                    console.log('🎉 CJMOD API综合演示完成！');
                }
            }
            
            style
            {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                padding: 50px;
                border-radius: 25px;
                box-shadow: 0 20px 60px rgba(102, 126, 234, 0.5);
                color: white;
                text-align: center;
                position: relative;
                overflow: hidden;
                
                .api-showcase {
                    font-size: 28px;
                    font-weight: bold;
                    margin-bottom: 30px;
                    text-shadow: 3px 3px 6px rgba(0,0,0,0.4);
                }
                
                &:before {
                    content: '';
                    position: absolute;
                    top: -50%;
                    left: -50%;
                    width: 200%;
                    height: 200%;
                    background: conic-gradient(from 0deg, transparent, rgba(255,255,255,0.1), transparent);
                    animation: rotate 4s linear infinite;
                }
                
                @keyframes rotate {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
                
                & {
                    transition: all 0.6s ease;
                    cursor: pointer;
                }
                
                &:hover {
                    transform: translateY(-20px) scale(1.05);
                    box-shadow: 0 40px 100px rgba(102, 126, 234, 0.7);
                }
            }
        }
    }
}