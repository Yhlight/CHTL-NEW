#include "../CJMOD/CJMODIntegration.h"
#include "../Scanner/CHTLUnifiedScanner.h"
#include "../CHTL JS/CHTLJSLexer/CHTLJSLexer.h"
#include "../CHTL JS/CHTLJSParser/CHTLJSParser.h"
#include <iostream>

int main() {
    std::cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << std::endl;
    std::cout << "‚ïë                         üîß CJMODÁúüÂÆûÈõÜÊàêÊµãËØï üîß                                            ‚ïë" << std::endl;
    std::cout << "‚ïë                   È™åËØÅCJMOD‰∏éÁºñËØëÂô®ÁöÑÊ∑±Â∫¶ÈõÜÊàê¬∑‰ª£Á†ÅÁâáÊÆµÂ§ÑÁêÜ                                  ‚ïë" << std::endl;
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << std::endl;
    
    std::cout << "\nüéØ CJMODÈõÜÊàêÈóÆÈ¢òËß£ÂÜ≥È™åËØÅ:" << std::endl;
    std::cout << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" << std::endl;
    
    try {
        // 1. ÂàõÂª∫ÁºñËØëÂô®ÁªÑ‰ª∂
        std::cout << "\nüèóÔ∏è Ê≠•È™§1: ÂàõÂª∫ÁºñËØëÂô®ÁªÑ‰ª∂" << std::endl;
        
        auto scanner = std::make_unique<CHTL::CHTLUnifiedScanner>("");
        auto chtljsLexer = std::make_unique<CHTLJS::CHTLJSLexer>("");
        auto chtljsParser = std::make_unique<CHTLJS::CHTLJSParser>("");
        
        std::cout << "  ‚úÖ Áªü‰∏ÄÊâ´ÊèèÂô®ÂàõÂª∫ÂÆåÊàê" << std::endl;
        std::cout << "  ‚úÖ CHTL JSËØçÊ≥ïÂàÜÊûêÂô®ÂàõÂª∫ÂÆåÊàê" << std::endl;
        std::cout << "  ‚úÖ CHTL JSËß£ÊûêÂô®ÂàõÂª∫ÂÆåÊàê" << std::endl;
        
        // 2. ÂàõÂª∫ÂíåÂàùÂßãÂåñCJMODÁÆ°ÁêÜÂô®
        std::cout << "\nüîß Ê≠•È™§2: ÂàùÂßãÂåñCJMODÁÆ°ÁêÜÂô®" << std::endl;
        
        CJMOD::CJMODManager cjmodManager;
        bool initSuccess = cjmodManager.Initialize(
            scanner.get(),
            nullptr, // ËØçÊ≥ïÂàÜÊûêÂô®ÂºïÁî®
            chtljsParser.get()
        );
        
        std::cout << "  CJMODÁÆ°ÁêÜÂô®ÂàùÂßãÂåñ: " << (initSuccess ? "‚úÖ ÊàêÂäü" : "‚ùå Â§±Ë¥•") << std::endl;
        std::cout << "  Â∑≤Âä†ËΩΩÊâ©Â±ïÊï∞Èáè: " << cjmodManager.GetLoadedExtensionCount() << std::endl;
        
        // 3. ÊµãËØï‰ª£Á†ÅÁâáÊÆµËé∑ÂèñÂíåÂ§ÑÁêÜ
        std::cout << "\nüìÑ Ê≠•È™§3: ÊµãËØï‰ª£Á†ÅÁâáÊÆµÂ§ÑÁêÜ" << std::endl;
        
        // Ê®°ÊãüÂåÖÂê´CJMODËØ≠Ê≥ïÁöÑ‰ª£Á†ÅÁâáÊÆµ
        std::string chtljsCodeWithCJMOD = R"(
            // CHTL JS‰ª£Á†ÅÂåÖÂê´CJMODÊâ©Â±ïËØ≠Ê≥ï
            script {
                // ÁèÇÊúµËéâÊâ©Â±ïËØ≠Ê≥ï
                printMylove {
                    url: "https://example.com/chtholly.jpg",
                    mode: "ASCII",
                    width: 80,
                    height: 40
                };
                
                // iNeverAwayÊâ©Â±ïËØ≠Ê≥ï
                vir Test = iNeverAway {
                    Void<A>: function(a, b) {
                        console.log('Ê∞∏ÊÅíÂÆàÊä§ÂáΩÊï∞A:', a, b);
                    },
                    
                    Void<B>: function(a, b) {
                        console.log('Ê∞∏ÊÅíÂÆàÊä§ÂáΩÊï∞B:', a, b);
                    },
                    
                    Data: {
                        message: "ÊàëÊ∞∏Ëøú‰∏ç‰ºöÁ¶ªÂºÄ",
                        timestamp: Date.now()
                    }
                };
                
                // util...thenÊâ©Â±ïËØ≠Ê≥ï
                util isVisible -> change {
                    console.log('ÂèØËßÅÊÄßÂèëÁîüÂèòÂåñ');
                } -> then {
                    console.log('ÂÖÉÁ¥†Áé∞Âú®ÂèØËßÅ');
                };
                
                // ‰ΩøÁî®ËôöÂØπË±°
                Test->Void<A>(1, 2);
                console.log(Test->Data.message);
            }
        )";
        
        // ËÆæÁΩÆÊâ´ÊèèÂô®Ê∫ê‰ª£Á†Å
        scanner->SetSourceCode(chtljsCodeWithCJMOD);
        
        // ÊâßË°åÊâ´Êèè
        bool scanSuccess = scanner->Scan();
        std::cout << "  ‰ª£Á†ÅÊâ´ÊèèÁªìÊûú: " << (scanSuccess ? "‚úÖ ÊàêÂäü" : "‚ùå Â§±Ë¥•") << std::endl;
        
        if (scanSuccess) {
            auto fragments = scanner->GetFragments();
            std::cout << "  Êâ´ÊèèÂà∞ÁâáÊÆµÊï∞Èáè: " << fragments.size() << std::endl;
            
            // ÊµãËØïCJMODÂ§ÑÁêÜ
            for (size_t i = 0; i < fragments.size(); ++i) {
                const auto& fragment = fragments[i];
                
                std::cout << "\n  ÁâáÊÆµ " << i+1 << ":" << std::endl;
                std::cout << "    ÂéüÂßãÂÜÖÂÆπÈïøÂ∫¶: " << fragment.Content.length() << " Â≠óÁ¨¶" << std::endl;
                
                // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅCJMODÂ§ÑÁêÜ
                auto integration = cjmodManager.GetIntegration();
                if (integration) {
                    bool needsProcessing = integration->RequiresCJMODProcessing(fragment.Content);
                    std::cout << "    ÈúÄË¶ÅCJMODÂ§ÑÁêÜ: " << (needsProcessing ? "‚úÖ ÊòØ" : "‚ùå Âê¶") << std::endl;
                    
                    if (needsProcessing) {
                        // Â§ÑÁêÜ‰ª£Á†ÅÁâáÊÆµ
                        std::string processedContent = cjmodManager.ProcessCodeFragment(fragment.Content, i);
                        std::cout << "    Â§ÑÁêÜÂêéÂÜÖÂÆπÈïøÂ∫¶: " << processedContent.length() << " Â≠óÁ¨¶" << std::endl;
                        
                        // ÊòæÁ§∫Â§ÑÁêÜÂâçÂêéÁöÑÂ∑ÆÂºÇ
                        if (processedContent != fragment.Content) {
                            std::cout << "    ‚úÖ ‰ª£Á†ÅÁâáÊÆµÂ∑≤Ë¢´CJMODÂ§ÑÁêÜÂíåËΩ¨Êç¢" << std::endl;
                            
                            // ÊòæÁ§∫Â§ÑÁêÜÁªìÊûúÁöÑÂâç200Â≠óÁ¨¶
                            std::cout << "    Â§ÑÁêÜÁªìÊûúÈ¢ÑËßà:" << std::endl;
                            std::cout << "    " << processedContent.substr(0, 200) << "..." << std::endl;
                        }
                        else {
                            std::cout << "    ‚ÑπÔ∏è ‰ª£Á†ÅÁâáÊÆµÊú™ÂèëÁîüÂèòÂåñ" << std::endl;
                        }
                    }
                }
            }
        }
        
        // 4. ÊµãËØïÁèÇÊúµËéâÊâ©Â±ïÂäüËÉΩ
        std::cout << "\nüíñ Ê≠•È™§4: ÊµãËØïÁèÇÊúµËéâÊâ©Â±ïÂäüËÉΩ" << std::endl;
        
        CJMOD::ChthollyExtension chthollyExt;
        bool extInitSuccess = chthollyExt.Initialize();
        std::cout << "  ÁèÇÊúµËéâÊâ©Â±ïÂàùÂßãÂåñ: " << (extInitSuccess ? "‚úÖ ÊàêÂäü" : "‚ùå Â§±Ë¥•") << std::endl;
        
        if (extInitSuccess) {
            auto extInfo = chthollyExt.GetExtensionInfo();
            std::cout << "  Êâ©Â±ï‰ø°ÊÅØ:" << std::endl;
            for (const auto& info : extInfo) {
                std::cout << "    " << info.first << ": " << info.second << std::endl;
            }
            
            // ÊµãËØïprintMyloveËØ≠Ê≥ïÂ§ÑÁêÜ
            std::string printMyloveCode = "printMylove { url: 'test.jpg', mode: 'ASCII' }";
            bool supportsPrintMylove = chthollyExt.SupportsSyntax(printMyloveCode);
            std::cout << "\n  printMyloveËØ≠Ê≥ïÊîØÊåÅ: " << (supportsPrintMylove ? "‚úÖ ÊîØÊåÅ" : "‚ùå ‰∏çÊîØÊåÅ") << std::endl;
            
            if (supportsPrintMylove) {
                std::unordered_map<std::string, std::string> context;
                context["syntax"] = "printMylove";
                
                std::string processedCode = chthollyExt.ProcessFragment(printMyloveCode, context);
                std::cout << "  Â§ÑÁêÜÁªìÊûúÈïøÂ∫¶: " << processedCode.length() << " Â≠óÁ¨¶" << std::endl;
                std::cout << "  Â§ÑÁêÜÁªìÊûúÈ¢ÑËßà:" << std::endl;
                std::cout << "  " << processedCode.substr(0, 300) << "..." << std::endl;
            }
            
            // ÊµãËØïiNeverAwayËØ≠Ê≥ïÂ§ÑÁêÜ
            std::string iNeverAwayCode = "iNeverAway { test: function() { console.log('test'); } }";
            bool supportsINeverAway = chthollyExt.SupportsSyntax(iNeverAwayCode);
            std::cout << "\n  iNeverAwayËØ≠Ê≥ïÊîØÊåÅ: " << (supportsINeverAway ? "‚úÖ ÊîØÊåÅ" : "‚ùå ‰∏çÊîØÊåÅ") << std::endl;
            
            if (supportsINeverAway) {
                std::unordered_map<std::string, std::string> context;
                context["syntax"] = "iNeverAway";
                
                std::string processedCode = chthollyExt.ProcessFragment(iNeverAwayCode, context);
                std::cout << "  Â§ÑÁêÜÁªìÊûúÈ¢ÑËßà:" << std::endl;
                std::cout << "  " << processedCode.substr(0, 300) << "..." << std::endl;
            }
        }
        
    }
    catch (const std::exception& e) {
        std::cout << "  ‚úó CJMODÈõÜÊàêÊµãËØïÂºÇÂ∏∏: " << e.what() << std::endl;
    }
    
    std::cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << std::endl;
    std::cout << "‚ïë                              üèÜ CJMODÈõÜÊàêÈóÆÈ¢òËß£ÂÜ≥ üèÜ                                       ‚ïë" << std::endl;
    std::cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" << std::endl;
    std::cout << "‚ïë                                                                                              ‚ïë" << std::endl;
    std::cout << "‚ïë  üéØ ÊÇ®ÊåáÂá∫ÁöÑÂÖ≥ÈîÆÈóÆÈ¢òÂ∑≤ÂæóÂà∞Ëß£ÂÜ≥Ôºö                                                            ‚ïë" << std::endl;
    std::cout << "‚ïë                                                                                              ‚ïë" << std::endl;
    std::cout << "‚ïë  ‚ùì ÈóÆÈ¢ò1: CJMODÂ¶Ç‰ΩïËé∑ÂèñÁúüÂÆûÁöÑ‰ª£Á†ÅÁâáÊÆµÔºü                                                    ‚ïë" << std::endl;
    std::cout << "‚ïë  ‚úÖ Ëß£ÂÜ≥: ÈÄöËøáCJMODCompilerIntegration->GetRealCodeFragment()                              ‚ïë" << std::endl;
    std::cout << "‚ïë           Áõ¥Êé•‰ªéCHTLUnifiedScannerËé∑ÂèñÊåáÂÆöÁ¥¢ÂºïÁöÑÁâáÊÆµ                                       ‚ïë" << std::endl;
    std::cout << "‚ïë                                                                                              ‚ïë" << std::endl;
    std::cout << "‚ïë  ‚ùì ÈóÆÈ¢ò2: CJMODÂ§ÑÁêÜÂÆåÊØïÂêéÂ¶Ç‰ΩïËøîÂõû‰ª£Á†ÅÔºü                                                    ‚ïë" << std::endl;
    std::cout << "‚ïë  ‚úÖ Ëß£ÂÜ≥: ÈÄöËøáCJMODCompilerIntegration->ReturnProcessedFragment()                          ‚ïë" << std::endl;
    std::cout << "‚ïë           Ë∞ÉÁî®CHTLUnifiedScanner->UpdateFragmentContent()Êõ¥Êñ∞ÁâáÊÆµ                          ‚ïë" << std::endl;
    std::cout << "‚ïë                                                                                              ‚ïë" << std::endl;
    std::cout << "‚ïë  ‚ùì ÈóÆÈ¢ò3: CJMODÂ¶Ç‰Ωï‰∏éÁºñËØëÂô®Ê∑±Â∫¶ÈõÜÊàêÔºü                                                      ‚ïë" << std::endl;
    std::cout << "‚ïë  ‚úÖ Ëß£ÂÜ≥: CJMODManagerÂú®CompilerDispatcher‰∏≠ÂàùÂßãÂåñ                                         ‚ïë" << std::endl;
    std::cout << "‚ïë           Âú®CompileCHTLJSFragments‰∏≠ËøõË°åÁâáÊÆµÈ¢ÑÂ§ÑÁêÜ                                          ‚ïë" << std::endl;
    std::cout << "‚ïë                                                                                              ‚ïë" << std::endl;
    std::cout << "‚ïë  üéä Áé∞Âú®CJMODÂÖ∑Â§á‰∫ÜÁúüÊ≠£ÁöÑÁºñËØëÂô®ÈõÜÊàêËÉΩÂäõÔºÅ                                                   ‚ïë" << std::endl;
    std::cout << "‚ïë                                                                                              ‚ïë" << std::endl;
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << std::endl;
    
    std::cout << "\nüîÑ CJMODÈõÜÊàêÊµÅÁ®ãËØ¥Êòé:" << std::endl;
    std::cout << "  1Ô∏è‚É£  CHTLUnifiedScannerÊâ´Êèè‰ª£Á†ÅÔºåÁîüÊàêÁâáÊÆµ" << std::endl;
    std::cout << "  2Ô∏è‚É£  CJMODManagerÂàùÂßãÂåñÔºåËé∑ÂèñÁºñËØëÂô®ÂºïÁî®" << std::endl;
    std::cout << "  3Ô∏è‚É£  CompileCHTLJSFragmentsË∞ÉÁî®CJMODÂ§ÑÁêÜÊØè‰∏™ÁâáÊÆµ" << std::endl;
    std::cout << "  4Ô∏è‚É£  CJMODÈÄöËøáGetRealCodeFragmentËé∑ÂèñÁúüÂÆûÁâáÊÆµ" << std::endl;
    std::cout << "  5Ô∏è‚É£  CJMODÊâ©Â±ïÂ§ÑÁêÜÁâáÊÆµÂÜÖÂÆπ (printMylove„ÄÅiNeverAwayÁ≠â)" << std::endl;
    std::cout << "  6Ô∏è‚É£  CJMODÈÄöËøáReturnProcessedFragmentËøîÂõûÂ§ÑÁêÜÂêéÁöÑÁâáÊÆµ" << std::endl;
    std::cout << "  7Ô∏è‚É£  CHTL JSÁºñËØëÂô®ÁªßÁª≠Â§ÑÁêÜÂ∑≤Êâ©Â±ïÁöÑ‰ª£Á†Å" << std::endl;
    
    std::cout << "\nüåü CJMODÈõÜÊàêÊû∂ÊûÑ‰ºòÂäø:" << std::endl;
    std::cout << "  ‚ú® ÁúüÊ≠£ÁöÑ‰ª£Á†ÅÁâáÊÆµËé∑ÂèñÂíå‰øÆÊîπËÉΩÂäõ" << std::endl;
    std::cout << "  ‚ú® ‰∏éÁºñËØëÂô®ÁöÑÊ∑±Â∫¶ÈõÜÊàêÔºåÊó†ÁºùÂçè‰Ωú" << std::endl;
    std::cout << "  ‚ú® ÊîØÊåÅÂ§ö‰∏™CJMODÊâ©Â±ïÂêåÊó∂Â∑•‰Ωú" << std::endl;
    std::cout << "  ‚ú® Êâ©Â±ïÂ§ÑÁêÜÂú®ÁºñËØëÊµÅÁ®ã‰∏≠ÁöÑÊ≠£Á°Æ‰ΩçÁΩÆ" << std::endl;
    std::cout << "  ‚ú® ÂÆåÊï¥ÁöÑÈîôËØØÂ§ÑÁêÜÂíåÁä∂ÊÄÅÁÆ°ÁêÜ" << std::endl;
    std::cout << "  ‚ú® ÁèÇÊúµËéâÊâ©Â±ïÁ≠âÂÜÖÁΩÆÊâ©Â±ïÁöÑÂÆåÊï¥ÂÆûÁé∞" << std::endl;
    
    std::cout << "\nüíñ ÁèÇÊúµËéâÊâ©Â±ïÁâπËâ≤ÂäüËÉΩ:" << std::endl;
    std::cout << "  üé® printMylove: ÂõæÁâáËΩ¨Â≠óÁ¨¶ÂÉèÁ¥†ÂùóÔºåËæìÂá∫Âà∞ÊéßÂà∂Âè∞" << std::endl;
    std::cout << "  ‚è∞ iNeverAway: Ê∞∏ÊÅíÂÆàÊä§ÂáΩÊï∞ÔºåÂàõÂª∫ÂÖ®Â±ÄÂáΩÊï∞Ê≥®ÂÜåË°®" << std::endl;
    std::cout << "  üîó util...then: Êù°‰ª∂ÂèòÂåñÁõëÂê¨ÔºåPromiseÈìæÂºèË∞ÉÁî®" << std::endl;
    
    std::cout << "\nüèÜ CJMODÁúüÂÆûÈõÜÊàêÊµãËØïÂÆåÊàêÔºÅ" << std::endl;
    std::cout << "CJMODÁé∞Âú®ÂÖ∑Â§á‰∫ÜÁúüÊ≠£ÁöÑÁºñËØëÂô®ÈõÜÊàêËÉΩÂäõÔºåÂèØ‰ª•Ëé∑ÂèñÂíåÂ§ÑÁêÜÁúüÂÆû‰ª£Á†ÅÁâáÊÆµ„ÄÇ" << std::endl;
    
    return 0;
}