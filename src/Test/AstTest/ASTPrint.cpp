#include "ASTPrint.h"
#include <iomanip>
#include <sstream>

namespace CHTL {
namespace Test {

void ASTPrint::PrintCHTLAST(const std::shared_ptr<CHTLBaseNode>& rootNode, const std::string& title) {
    std::cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << std::endl;
    std::cout << "‚ïë " << std::setw(88) << std::left << title << " ‚ïë" << std::endl;
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << std::endl;
    
    if (!rootNode) {
        std::cout << "  üìù AST‰∏∫Á©∫" << std::endl;
        return;
    }
    
    std::cout << "\nüå≥ ASTÁªìÊûÑ:" << std::endl;
    std::cout << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" << std::endl;
    
    std::cout << GenerateCHTLASTText(rootNode) << std::endl;
    std::cout << "\n" << GenerateCHTLASTStatistics(rootNode) << std::endl;
}

void ASTPrint::PrintCHTLJSAST(const std::shared_ptr<CHTLJS::CHTLJSBaseNode>& rootNode, const std::string& title) {
    std::cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << std::endl;
    std::cout << "‚ïë " << std::setw(88) << std::left << title << " ‚ïë" << std::endl;
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << std::endl;
    
    if (!rootNode) {
        std::cout << "  üìù AST‰∏∫Á©∫" << std::endl;
        return;
    }
    
    std::cout << "\nüå≥ ASTÁªìÊûÑ:" << std::endl;
    std::cout << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" << std::endl;
    
    std::cout << GenerateCHTLJSASTText(rootNode) << std::endl;
    std::cout << "\n" << GenerateCHTLJSASTStatistics(rootNode) << std::endl;
}

std::string ASTPrint::GenerateCHTLASTText(const std::shared_ptr<CHTLBaseNode>& rootNode, int indent) {
    if (!rootNode) {
        return "";
    }
    
    std::ostringstream oss;
    
    // ÊâìÂç∞ÂΩìÂâçËäÇÁÇπ
    oss << GenerateIndent(indent) << "üìÑ " << rootNode->GetTypeString();
    
    // Ê∑ªÂä†ËäÇÁÇπÂÄº‰ø°ÊÅØ
    if (!rootNode->GetValue().empty()) {
        oss << " [ÂÄº: \"" << rootNode->GetValue().substr(0, 30);
        if (rootNode->GetValue().length() > 30) {
            oss << "...";
        }
        oss << "\"]";
    }
    
    oss << std::endl;
    
    // ÈÄíÂΩíÊâìÂç∞Â≠êËäÇÁÇπ
    const auto& children = rootNode->GetChildren();
    for (const auto& child : children) {
        oss << GenerateCHTLASTText(child, indent + 1);
    }
    
    return oss.str();
}

std::string ASTPrint::GenerateCHTLJSASTText(const std::shared_ptr<CHTLJS::CHTLJSBaseNode>& rootNode, int indent) {
    if (!rootNode) {
        return "";
    }
    
    std::ostringstream oss;
    
    // ÊâìÂç∞ÂΩìÂâçËäÇÁÇπ
    oss << GenerateIndent(indent) << "üìÑ " << rootNode->GetTypeString();
    
    // Ê∑ªÂä†ËäÇÁÇπÂÄº‰ø°ÊÅØ
    if (!rootNode->GetValue().empty()) {
        oss << " [ÂÄº: \"" << rootNode->GetValue().substr(0, 30);
        if (rootNode->GetValue().length() > 30) {
            oss << "...";
        }
        oss << "\"]";
    }
    
    oss << std::endl;
    
    // ÈÄíÂΩíÊâìÂç∞Â≠êËäÇÁÇπ
    const auto& children = rootNode->GetChildren();
    for (const auto& child : children) {
        oss << GenerateCHTLJSASTText(child, indent + 1);
    }
    
    return oss.str();
}

std::string ASTPrint::GenerateCHTLASTStatistics(const std::shared_ptr<CHTLBaseNode>& rootNode) {
    if (!rootNode) {
        return "üìä ASTÁªüËÆ°: Á©∫AST";
    }
    
    size_t nodeCount = CountCHTLASTNodes(rootNode);
    
    std::ostringstream oss;
    oss << "üìä ASTÁªüËÆ°:" << std::endl;
    oss << "  ËäÇÁÇπÊÄªÊï∞: " << nodeCount << std::endl;
    oss << "  Ê†πËäÇÁÇπÁ±ªÂûã: " << rootNode->GetTypeString() << std::endl;
    oss << "  Áõ¥Êé•Â≠êËäÇÁÇπÊï∞: " << rootNode->GetChildren().size() << std::endl;
    oss << "  ASTÊ∑±Â∫¶: " << "TODO" << std::endl; // TODO: ÂÆûÁé∞Ê∑±Â∫¶ËÆ°ÁÆó
    oss << "  ÁªìÊûÑÂÆåÊï¥ÊÄß: " << (ValidateCHTLASTStructure(rootNode) ? "‚úÖ ÂÆåÊï¥" : "‚ùå ‰∏çÂÆåÊï¥") << std::endl;
    
    return oss.str();
}

std::string ASTPrint::GenerateCHTLJSASTStatistics(const std::shared_ptr<CHTLJS::CHTLJSBaseNode>& rootNode) {
    if (!rootNode) {
        return "üìä ASTÁªüËÆ°: Á©∫AST";
    }
    
    size_t nodeCount = CountCHTLJSASTNodes(rootNode);
    
    std::ostringstream oss;
    oss << "üìä ASTÁªüËÆ°:" << std::endl;
    oss << "  ËäÇÁÇπÊÄªÊï∞: " << nodeCount << std::endl;
    oss << "  Ê†πËäÇÁÇπÁ±ªÂûã: " << rootNode->GetTypeString() << std::endl;
    oss << "  Áõ¥Êé•Â≠êËäÇÁÇπÊï∞: " << rootNode->GetChildren().size() << std::endl;
    oss << "  ASTÊ∑±Â∫¶: " << "TODO" << std::endl; // TODO: ÂÆûÁé∞Ê∑±Â∫¶ËÆ°ÁÆó
    oss << "  ÁªìÊûÑÂÆåÊï¥ÊÄß: " << (ValidateCHTLJSASTStructure(rootNode) ? "‚úÖ ÂÆåÊï¥" : "‚ùå ‰∏çÂÆåÊï¥") << std::endl;
    
    return oss.str();
}

std::string ASTPrint::ExportCHTLASTAsDOT(const std::shared_ptr<CHTLBaseNode>& rootNode) {
    if (!rootNode) {
        return "";
    }
    
    std::ostringstream oss;
    oss << "digraph CHTL_AST {" << std::endl;
    oss << "  rankdir=TB;" << std::endl;
    oss << "  node [shape=box, style=rounded];" << std::endl;
    
    // TODO: ÂÆûÁé∞DOTÊ†ºÂºèÂØºÂá∫
    oss << "  \"Root\" [label=\"" << EscapeDOTString(rootNode->GetTypeString()) << "\"];" << std::endl;
    
    oss << "}" << std::endl;
    
    return oss.str();
}

std::string ASTPrint::ExportCHTLJSASTAsDOT(const std::shared_ptr<CHTLJS::CHTLJSBaseNode>& rootNode) {
    if (!rootNode) {
        return "";
    }
    
    std::ostringstream oss;
    oss << "digraph CHTLJS_AST {" << std::endl;
    oss << "  rankdir=TB;" << std::endl;
    oss << "  node [shape=box, style=rounded];" << std::endl;
    
    // TODO: ÂÆûÁé∞DOTÊ†ºÂºèÂØºÂá∫
    oss << "  \"Root\" [label=\"" << EscapeDOTString(rootNode->GetTypeString()) << "\"];" << std::endl;
    
    oss << "}" << std::endl;
    
    return oss.str();
}

bool ASTPrint::ValidateCHTLASTStructure(const std::shared_ptr<CHTLBaseNode>& rootNode) {
    if (!rootNode) {
        return false;
    }
    
    // Âü∫Êú¨È™åËØÅÔºöÊ£ÄÊü•ËäÇÁÇπÁ±ªÂûãÊòØÂê¶ÊúâÊïà
    if (rootNode->GetTypeString().empty()) {
        return false;
    }
    
    // ÈÄíÂΩíÈ™åËØÅÂ≠êËäÇÁÇπ
    const auto& children = rootNode->GetChildren();
    for (const auto& child : children) {
        if (!ValidateCHTLASTStructure(child)) {
            return false;
        }
    }
    
    return true;
}

bool ASTPrint::ValidateCHTLJSASTStructure(const std::shared_ptr<CHTLJS::CHTLJSBaseNode>& rootNode) {
    if (!rootNode) {
        return false;
    }
    
    // Âü∫Êú¨È™åËØÅÔºöÊ£ÄÊü•ËäÇÁÇπÁ±ªÂûãÊòØÂê¶ÊúâÊïà
    if (rootNode->GetTypeString().empty()) {
        return false;
    }
    
    // ÈÄíÂΩíÈ™åËØÅÂ≠êËäÇÁÇπ
    const auto& children = rootNode->GetChildren();
    for (const auto& child : children) {
        if (!ValidateCHTLJSASTStructure(child)) {
            return false;
        }
    }
    
    return true;
}

size_t ASTPrint::CountCHTLASTNodes(const std::shared_ptr<CHTLBaseNode>& node) {
    if (!node) {
        return 0;
    }
    
    size_t count = 1; // ÂΩìÂâçËäÇÁÇπ
    
    const auto& children = node->GetChildren();
    for (const auto& child : children) {
        count += CountCHTLASTNodes(child);
    }
    
    return count;
}

size_t ASTPrint::CountCHTLJSASTNodes(const std::shared_ptr<CHTLJS::CHTLJSBaseNode>& node) {
    if (!node) {
        return 0;
    }
    
    size_t count = 1; // ÂΩìÂâçËäÇÁÇπ
    
    const auto& children = node->GetChildren();
    for (const auto& child : children) {
        count += CountCHTLJSASTNodes(child);
    }
    
    return count;
}

std::string ASTPrint::GenerateIndent(int level) {
    return std::string(level * 2, ' ');
}

std::string ASTPrint::EscapeDOTString(const std::string& str) {
    std::string result = str;
    
    // ËΩ¨‰πâDOTÊ†ºÂºèÁâπÊÆäÂ≠óÁ¨¶
    size_t pos = 0;
    while ((pos = result.find("\"", pos)) != std::string::npos) {
        result.replace(pos, 1, "\\\"");
        pos += 2;
    }
    
    pos = 0;
    while ((pos = result.find("\\", pos)) != std::string::npos) {
        result.replace(pos, 1, "\\\\");
        pos += 2;
    }
    
    return result;
}

} // namespace Test
} // namespace CHTL