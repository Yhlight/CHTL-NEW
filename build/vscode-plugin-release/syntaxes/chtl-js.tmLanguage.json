{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "CHTL JS",
    "scopeName": "source.chtl-js",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#module-blocks"
        },
        {
            "include": "#script-blocks"
        },
        {
            "include": "#selector-references"
        },
        {
            "include": "#chtl-js-operators"
        },
        {
            "include": "#chtl-js-keywords"
        },
        {
            "include": "#cjmod-syntax"
        },
        {
            "include": "#cjmod-placeholders"
        },
        {
            "include": "#javascript-base"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#braces"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.chtl-js",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.chtl-js",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "module-blocks": {
            "patterns": [
                {
                    "name": "meta.module-block.chtl-js",
                    "begin": "\\b(module)\\s*\\{",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.module.chtl-js"
                        }
                    },
                    "end": "\\}",
                    "patterns": [
                        {
                            "include": "#javascript-base"
                        },
                        {
                            "include": "#comments"
                        }
                    ]
                }
            ]
        },
        "script-blocks": {
            "patterns": [
                {
                    "name": "meta.script-block.chtl-js",
                    "begin": "\\b(script)\\s*\\{",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.script.chtl-js"
                        }
                    },
                    "end": "\\}",
                    "patterns": [
                        {
                            "include": "#selector-references"
                        },
                        {
                            "include": "#chtl-js-operators"
                        },
                        {
                            "include": "#javascript-base"
                        },
                        {
                            "include": "#comments"
                        }
                    ]
                }
            ]
        },
        "selector-references": {
            "patterns": [
                {
                    "name": "variable.other.selector-reference.chtl-js",
                    "match": "\\{\\{[^}]+\\}\\}",
                    "captures": {
                        "0": {
                            "patterns": [
                                {
                                    "name": "punctuation.definition.selector.begin.chtl-js",
                                    "match": "\\{\\{"
                                },
                                {
                                    "name": "punctuation.definition.selector.end.chtl-js",
                                    "match": "\\}\\}"
                                },
                                {
                                    "name": "entity.other.css-selector.chtl-js",
                                    "match": "\\.(\\w+)|#(\\w+)|&"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "chtl-js-operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arrow.chtl-js",
                    "match": "->"
                },
                {
                    "name": "keyword.operator.event-binding.chtl-js",
                    "match": "&->"
                }
            ]
        },
        "chtl-js-keywords": {
            "patterns": [
                {
                    "name": "keyword.control.chtl-js",
                    "match": "\\b(listen|delegate|animate|vir)\\b"
                }
            ]
        },
        "javascript-base": {
            "patterns": [
                {
                    "name": "keyword.control.js",
                    "match": "\\b(function|var|let|const|if|else|for|while|do|switch|case|default|break|continue|return|try|catch|finally|throw|new|this|super|class|extends|import|export|from|as|async|await)\\b"
                },
                {
                    "name": "keyword.operator.js",
                    "match": "(\\+|\\-|\\*|\\/|%|=|==|===|!=|!==|<|>|<=|>=|&&|\\|\\||!|\\?|:)"
                },
                {
                    "name": "constant.language.js",
                    "match": "\\b(true|false|null|undefined|NaN|Infinity)\\b"
                },
                {
                    "name": "constant.numeric.js",
                    "match": "\\b\\d+(\\.\\d+)?\\b"
                },
                {
                    "name": "support.function.js",
                    "match": "\\b(console|document|window|Array|Object|String|Number|Boolean|Date|RegExp|Math|JSON)\\b"
                },
                {
                    "name": "entity.name.function.js",
                    "match": "\\b([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*(?=\\()"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.chtl-js",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.chtl-js",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.chtl-js",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.chtl-js",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.template.chtl-js",
                    "begin": "`",
                    "end": "`",
                    "patterns": [
                        {
                            "name": "constant.character.escape.chtl-js",
                            "match": "\\\\."
                        },
                        {
                            "name": "meta.template.expression.chtl-js",
                            "begin": "\\$\\{",
                            "end": "\\}",
                            "patterns": [
                                {
                                    "include": "#javascript-base"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "braces": {
            "patterns": [
                {
                    "name": "punctuation.definition.block.chtl-js",
                    "match": "[{}]"
                },
                {
                    "name": "punctuation.definition.bracket.chtl-js",
                    "match": "[\\[\\]]"
                },
                {
                    "name": "punctuation.definition.parentheses.chtl-js",
                    "match": "[()]"
                }
            ]
        },
        "cjmod-syntax": {
            "patterns": [
                {
                    "name": "keyword.control.cjmod",
                    "match": "\\b(then|when|with|using|via|from|to|for|of|in|as)\\b"
                },
                {
                    "name": "keyword.operator.cjmod",
                    "match": "(\\*\\*|->|&->|\\|>|<\\||=>|<=>)"
                },
                {
                    "name": "storage.type.cjmod",
                    "match": "\\bvir\\b"
                }
            ]
        },
        "cjmod-placeholders": {
            "patterns": [
                {
                    "name": "variable.parameter.cjmod.required-unordered",
                    "match": "\\$!_"
                },
                {
                    "name": "variable.parameter.cjmod.optional-unordered", 
                    "match": "\\$\\?_"
                },
                {
                    "name": "variable.parameter.cjmod.unordered",
                    "match": "\\$_"
                },
                {
                    "name": "variable.parameter.cjmod.required",
                    "match": "\\$!"
                },
                {
                    "name": "variable.parameter.cjmod.optional",
                    "match": "\\$\\?"
                },
                {
                    "name": "variable.parameter.cjmod.basic",
                    "match": "\\$"
                },
                {
                    "name": "variable.parameter.cjmod.variadic",
                    "match": "\\.\\.\\."
                }
            ]
        }
    }
}