;; 由比滨结衣音乐播放器模板
;; 基于由比滨结衣角色设计的可爱音乐播放器

[Template] @MusicPlayer
{
    div
    {
        class: yuigahama-music-player;
        
        style
        {
            .yuigahama-music-player
            {
                background: linear-gradient(135deg, #FFB6C1 0%, #FFC0CB 50%, #FFE4E1 100%);
                border-radius: 20px;
                padding: 20px;
                box-shadow: 0 8px 25px rgba(255, 182, 193, 0.4);
                border: 2px solid #FFB6C1;
                max-width: 350px;
                margin: 20px auto;
                position: relative;
                overflow: hidden;
            }
            
            .yuigahama-music-player::before
            {
                content: "";
                position: absolute;
                top: -50%;
                left: -50%;
                width: 200%;
                height: 200%;
                background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
                transform: rotate(45deg);
                animation: yuigahamaShine 3s linear infinite;
            }
            
            @keyframes yuigahamaShine
            {
                0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
                100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
            }
            
            .player-header
            {
                text-align: center;
                margin-bottom: 15px;
                color: #8B4B8B;
                font-weight: bold;
                font-size: 16px;
            }
            
            .player-display
            {
                background: rgba(255, 255, 255, 0.8);
                border-radius: 12px;
                padding: 15px;
                margin-bottom: 15px;
                text-align: center;
                color: #8B4B8B;
                min-height: 60px;
                display: flex;
                align-items: center;
                justify-content: center;
                flex-direction: column;
            }
            
            .track-title
            {
                font-weight: bold;
                margin-bottom: 5px;
            }
            
            .track-artist
            {
                font-size: 12px;
                opacity: 0.8;
            }
            
            .player-controls
            {
                display: flex;
                justify-content: center;
                gap: 15px;
                margin-bottom: 15px;
            }
            
            .control-btn
            {
                background: linear-gradient(45deg, #FF69B4, #FFB6C1);
                border: none;
                border-radius: 50%;
                width: 45px;
                height: 45px;
                color: white;
                font-size: 18px;
                cursor: pointer;
                transition: all 0.3s ease;
                box-shadow: 0 4px 8px rgba(255, 105, 180, 0.3);
            }
            
            .control-btn:hover
            {
                transform: translateY(-2px);
                box-shadow: 0 6px 12px rgba(255, 105, 180, 0.4);
            }
            
            .control-btn:active
            {
                transform: translateY(0);
            }
            
            .progress-container
            {
                background: rgba(255, 255, 255, 0.6);
                border-radius: 10px;
                height: 8px;
                margin-bottom: 10px;
                overflow: hidden;
            }
            
            .progress-fill
            {
                background: linear-gradient(90deg, #FF69B4, #FFB6C1);
                height: 100%;
                width: 0%;
                transition: width 0.3s ease;
                border-radius: 10px;
            }
            
            .volume-container
            {
                display: flex;
                align-items: center;
                gap: 10px;
                color: #8B4B8B;
                font-size: 14px;
            }
            
            .volume-slider
            {
                flex: 1;
                height: 6px;
                background: rgba(255, 255, 255, 0.6);
                border-radius: 3px;
                outline: none;
                cursor: pointer;
            }
        }
        
        script
        {
            // 由比滨结衣音乐播放器逻辑
            console.log('🌸 雅哈喽～由比滨结衣的音乐播放器启动！');
            
            const player = {{.yuigahama-music-player}};
            const playlist = @Playlist || [
                { title: "青春", artist: "由比滨结衣", url: "youth.mp3" },
                { title: "友谊", artist: "由比滨结衣", url: "friendship.mp3" },
                { title: "雅哈喽", artist: "由比滨结衣", url: "yahalloo.mp3" }
            ];
            
            let currentTrack = 0;
            let isPlaying = false;
            let volume = @Volume || 0.7;
            let currentTime = 0;
            let duration = 100; // 模拟时长
            
            // 创建播放器界面
            function createPlayerInterface() {
                player.innerHTML = `
                    <div class="player-header">🎵 雅哈喽音乐播放器 🎵</div>
                    <div class="player-display">
                        <div class="track-title">${playlist[currentTrack]?.title || '无曲目'}</div>
                        <div class="track-artist">${playlist[currentTrack]?.artist || ''}</div>
                    </div>
                    <div class="player-controls">
                        <button class="control-btn" onclick="window.YuigahamaPlayer.prev()">⏮</button>
                        <button class="control-btn play-pause" onclick="window.YuigahamaPlayer.togglePlay()">▶</button>
                        <button class="control-btn" onclick="window.YuigahamaPlayer.next()">⏭</button>
                    </div>
                    <div class="progress-container">
                        <div class="progress-fill"></div>
                    </div>
                    <div class="volume-container">
                        🔊 <input type="range" class="volume-slider" min="0" max="100" value="${volume * 100}" 
                               onchange="window.YuigahamaPlayer.setVolume(this.value / 100)">
                    </div>
                `;
            }
            
            // 播放器控制函数
            window.YuigahamaPlayer = {
                play: function() {
                    isPlaying = true;
                    const playBtn = player.querySelector('.play-pause');
                    if (playBtn) playBtn.textContent = '⏸';
                    console.log('🎶 开始播放:', playlist[currentTrack]?.title);
                },
                
                pause: function() {
                    isPlaying = false;
                    const playBtn = player.querySelector('.play-pause');
                    if (playBtn) playBtn.textContent = '▶';
                    console.log('⏸️ 暂停播放');
                },
                
                togglePlay: function() {
                    if (isPlaying) {
                        this.pause();
                    } else {
                        this.play();
                    }
                },
                
                next: function() {
                    currentTrack = (currentTrack + 1) % playlist.length;
                    this.updateDisplay();
                    console.log('⏭️ 下一首:', playlist[currentTrack]?.title);
                },
                
                prev: function() {
                    currentTrack = (currentTrack - 1 + playlist.length) % playlist.length;
                    this.updateDisplay();
                    console.log('⏮️ 上一首:', playlist[currentTrack]?.title);
                },
                
                setVolume: function(vol) {
                    volume = vol;
                    console.log('🔊 音量设置:', Math.round(vol * 100) + '%');
                },
                
                updateDisplay: function() {
                    const titleEl = player.querySelector('.track-title');
                    const artistEl = player.querySelector('.track-artist');
                    if (titleEl) titleEl.textContent = playlist[currentTrack]?.title || '无曲目';
                    if (artistEl) artistEl.textContent = playlist[currentTrack]?.artist || '';
                }
            };
            
            // 初始化播放器
            createPlayerInterface();
            
            // 模拟播放进度
            if (@AutoPlay) {
                setTimeout(() => {
                    window.YuigahamaPlayer.play();
                }, 1000);
            }
        }
    }
}