#pragma once

#include "BaseNode.h"
#include <unordered_set>

namespace CHTL {

    // 样式节点类型枚举
    enum class CHTLStyleNodeType {
        LOCAL_STYLE,            // 局部样式块
        GLOBAL_STYLE,           // 全局样式块
        INLINE_STYLE,           // 内联样式
        CSS_SELECTOR,           // CSS选择器块
        STYLE_PROPERTY          // 样式属性
    };

    // 选择器类型枚举
    enum class CHTLSelectorType {
        CLASS_SELECTOR,         // .className
        ID_SELECTOR,            // #idName
        CONTEXT_REFERENCE,      // & 引用选择器
        PSEUDO_CLASS,           // &:hover
        PSEUDO_ELEMENT,         // &::before
        TAG_SELECTOR,           // tagName
        DESCENDANT_SELECTOR     // .parent .child
    };

    // 样式节点基类
    // 专门处理CHTL样式相关语法的AST节点
    class CHTLStyleNode : public CHTLBaseNode {
    private:
        CHTLStyleNodeType styleType;                           // 样式节点类型
        bool isLocal;                                          // 是否为局部样式
        bool shouldAddToGlobal;                                // 是否应该添加到全局样式块
        std::string parentElementId;                           // 父元素ID（用于自动化）
        
        // 自动化相关
        std::string autoClassName;                             // 自动生成的类名
        std::string autoIdName;                                // 自动生成的ID名
        bool hasAutoClass;                                     // 是否有自动类名
        bool hasAutoId;                                        // 是否有自动ID

    public:
        // 构造函数
        explicit CHTLStyleNode(CHTLStyleNodeType type = CHTLStyleNodeType::LOCAL_STYLE);
        ~CHTLStyleNode() override = default;

        // 样式类型管理
        CHTLStyleNodeType GetStyleType() const;                // 获取样式类型
        void SetStyleType(CHTLStyleNodeType type);             // 设置样式类型
        bool IsLocal() const;                                  // 是否为局部样式
        void SetIsLocal(bool local);                          // 设置是否为局部样式
        
        // 全局样式块管理
        bool ShouldAddToGlobal() const;                        // 是否应该添加到全局
        void SetShouldAddToGlobal(bool shouldAdd);             // 设置是否添加到全局
        
        // 父元素关联
        const std::string& GetParentElementId() const;         // 获取父元素ID
        void SetParentElementId(const std::string& elementId); // 设置父元素ID
        
        // 自动化类名/ID管理
        const std::string& GetAutoClassName() const;           // 获取自动类名
        const std::string& GetAutoIdName() const;              // 获取自动ID名
        void SetAutoClassName(const std::string& className);   // 设置自动类名
        void SetAutoIdName(const std::string& idName);         // 设置自动ID名
        bool HasAutoClass() const;                             // 是否有自动类名
        bool HasAutoId() const;                                // 是否有自动ID
        
        // 样式属性管理
        void AddStyleProperty(const std::string& property, const std::string& value);  // 添加样式属性
        void RemoveStyleProperty(const std::string& property);                         // 移除样式属性
        std::string GetStyleProperty(const std::string& property) const;               // 获取样式属性
        bool HasStyleProperty(const std::string& property) const;                      // 是否有样式属性
        std::unordered_map<std::string, std::string> GetAllStyleProperties() const;    // 获取所有样式属性
        
        // CSS选择器管理
        std::vector<std::shared_ptr<CHTLBaseNode>> GetSelectorNodes() const;           // 获取选择器节点
        std::shared_ptr<CHTLBaseNode> GetFirstClassSelector() const;                   // 获取第一个类选择器
        std::shared_ptr<CHTLBaseNode> GetFirstIdSelector() const;                      // 获取第一个ID选择器
        std::vector<std::shared_ptr<CHTLBaseNode>> GetContextReferences() const;       // 获取&引用选择器
        
        // 自动化处理
        void ProcessAutomation();                              // 处理选择器自动化
        void ApplyAutoClass();                                 // 应用自动类名
        void ApplyAutoId();                                    // 应用自动ID
        
        // 生成方法
        std::string GenerateInlineCSS() const;                 // 生成内联CSS
        std::string GenerateGlobalCSS() const;                 // 生成全局CSS
        
        // 重写虚方法
        std::string ToString() const override;                 // 转换为字符串表示
        std::shared_ptr<CHTLBaseNode> Clone() const override;  // 克隆节点
        bool Validate() const override;                        // 验证节点有效性
        
        // 静态工具方法
        static std::string StyleTypeToString(CHTLStyleNodeType type);  // 样式类型转字符串
    };

    // CSS选择器节点类
    // 专门处理CSS选择器语法
    class CHTLSelectorNode : public CHTLBaseNode {
    private:
        CHTLSelectorType selectorType;                         // 选择器类型
        std::string selectorValue;                             // 选择器值
        std::string contextReference;                          // 上下文引用（&对应的实际选择器）
        bool isAutoGenerated;                                  // 是否为自动生成
        
        // 伪类/伪元素相关
        std::string pseudoClass;                               // 伪类名称
        std::string pseudoElement;                             // 伪元素名称

    public:
        // 构造函数
        CHTLSelectorNode(CHTLSelectorType type, const std::string& value);
        ~CHTLSelectorNode() override = default;

        // 选择器类型管理
        CHTLSelectorType GetSelectorType() const;              // 获取选择器类型
        void SetSelectorType(CHTLSelectorType type);           // 设置选择器类型
        
        // 选择器值管理
        const std::string& GetSelectorValue() const;           // 获取选择器值
        void SetSelectorValue(const std::string& value);       // 设置选择器值
        
        // 上下文引用管理
        const std::string& GetContextReference() const;        // 获取上下文引用
        void SetContextReference(const std::string& reference); // 设置上下文引用
        void ResolveContextReference(const std::string& className, const std::string& idName); // 解析上下文引用
        
        // 自动生成标记
        bool IsAutoGenerated() const;                          // 是否为自动生成
        void SetAutoGenerated(bool autoGen);                   // 设置自动生成标记
        
        // 伪类/伪元素管理
        const std::string& GetPseudoClass() const;             // 获取伪类
        const std::string& GetPseudoElement() const;           // 获取伪元素
        void SetPseudoClass(const std::string& pseudoClass);   // 设置伪类
        void SetPseudoElement(const std::string& pseudoElement); // 设置伪元素
        bool HasPseudoClass() const;                           // 是否有伪类
        bool HasPseudoElement() const;                         // 是否有伪元素
        
        // CSS生成方法
        std::string GenerateCSS() const;                       // 生成CSS选择器
        std::string GenerateCSSWithContext(const std::string& contextClass, const std::string& contextId) const; // 生成带上下文的CSS
        
        // 验证方法
        bool IsValidSelector() const;                          // 是否为有效选择器
        
        // 重写虚方法
        std::string ToString() const override;                 // 转换为字符串表示
        std::shared_ptr<CHTLBaseNode> Clone() const override;  // 克隆节点
        bool Validate() const override;                        // 验证节点有效性
        
        // 静态工具方法
        static std::string SelectorTypeToString(CHTLSelectorType type);     // 选择器类型转字符串
        static CHTLSelectorType ParseSelectorType(const std::string& selector); // 解析选择器类型
        static bool IsValidCSSSelector(const std::string& selector);        // 验证CSS选择器
    };

    // 样式属性节点类
    // 专门处理CSS属性
    class CHTLStylePropertyNode : public CHTLBaseNode {
    private:
        std::string propertyName;                              // 属性名
        std::string propertyValue;                             // 属性值
        bool isImportant;                                      // 是否为!important
        bool hasVariableReference;                             // 是否包含变量引用

    public:
        // 构造函数
        CHTLStylePropertyNode(const std::string& property, const std::string& value);
        ~CHTLStylePropertyNode() override = default;

        // 属性管理
        const std::string& GetPropertyName() const;            // 获取属性名
        const std::string& GetPropertyValue() const;           // 获取属性值
        void SetPropertyName(const std::string& property);     // 设置属性名
        void SetPropertyValue(const std::string& value);       // 设置属性值
        
        // 重要性标记
        bool IsImportant() const;                              // 是否为!important
        void SetImportant(bool important);                     // 设置!important
        
        // 变量引用
        bool HasVariableReference() const;                     // 是否包含变量引用
        void SetHasVariableReference(bool hasVar);             // 设置变量引用标记
        
        // CSS生成
        std::string GenerateCSS() const;                       // 生成CSS属性
        
        // 重写虚方法
        std::string ToString() const override;                 // 转换为字符串表示
        std::shared_ptr<CHTLBaseNode> Clone() const override;  // 克隆节点
        bool Validate() const override;                        // 验证节点有效性
        
        // 静态验证方法
        static bool IsValidCSSProperty(const std::string& property);   // 验证CSS属性名
        static bool IsValidCSSValue(const std::string& value);         // 验证CSS属性值
    };

    // 样式节点工厂类
    class CHTLStyleNodeFactory {
    public:
        // 创建样式节点
        static std::shared_ptr<CHTLStyleNode> CreateLocalStyleNode();
        static std::shared_ptr<CHTLStyleNode> CreateGlobalStyleNode();
        
        // 创建选择器节点
        static std::shared_ptr<CHTLSelectorNode> CreateClassSelector(const std::string& className);
        static std::shared_ptr<CHTLSelectorNode> CreateIdSelector(const std::string& idName);
        static std::shared_ptr<CHTLSelectorNode> CreateContextReference();
        static std::shared_ptr<CHTLSelectorNode> CreatePseudoClassSelector(const std::string& pseudoClass);
        static std::shared_ptr<CHTLSelectorNode> CreatePseudoElementSelector(const std::string& pseudoElement);
        
        // 创建样式属性节点
        static std::shared_ptr<CHTLStylePropertyNode> CreateStyleProperty(const std::string& property, const std::string& value);
        
        // 解析方法
        static CHTLSelectorType ParseSelectorFromText(const std::string& text);
        static std::shared_ptr<CHTLSelectorNode> ParseSelector(const std::string& selectorText);
    };

} // namespace CHTL