#include "../Core/ComponentManager.h"
#include "../Core/ServiceLocator.h"
#include "../Components/CHTLCompilerComponent.h"
#include "../Components/ModularCompilerDispatcher.h"
#include <iostream>

int main() {
    std::cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << std::endl;
    std::cout << "‚ïë                        üèóÔ∏è Ê®°ÂùóÂåñÊû∂ÊûÑÊµãËØï üèóÔ∏è                                              ‚ïë" << std::endl;
    std::cout << "‚ïë                   ÁªÑ‰ª∂ÂºèÁºñÁ®ã¬∑‰æùËµñÊ≥®ÂÖ•¬∑ÊúçÂä°ÂÆö‰Ωç¬∑Ê®°ÂùóÂåñËÆæËÆ°                                 ‚ïë" << std::endl;
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << std::endl;
    
    std::cout << "\nüéØ Ê®°ÂùóÂåñÊû∂ÊûÑÈ™åËØÅ:" << std::endl;
    std::cout << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" << std::endl;
    
    try {
        // 1. ÊµãËØïÁªÑ‰ª∂ÁÆ°ÁêÜÂô®
        std::cout << "\nüîß Ê≠•È™§1: ÁªÑ‰ª∂ÁÆ°ÁêÜÂô®ÊµãËØï" << std::endl;
        
        auto& componentManager = CHTL::Core::ComponentManager::GetInstance();
        bool initSuccess = componentManager.Initialize();
        
        std::cout << "  ÁªÑ‰ª∂ÁÆ°ÁêÜÂô®ÂàùÂßãÂåñ: " << (initSuccess ? "‚úÖ ÊàêÂäü" : "‚ùå Â§±Ë¥•") << std::endl;
        
        // 2. ÊµãËØïÁºñËØëÂô®Â∑•ÂéÇ
        std::cout << "\nüè≠ Ê≠•È™§2: ÁºñËØëÂô®Â∑•ÂéÇÊµãËØï" << std::endl;
        
        bool factorySuccess = CHTL::Components::CompilerFactory::CreateStandardConfiguration();
        std::cout << "  Ê†áÂáÜÈÖçÁΩÆÂàõÂª∫: " << (factorySuccess ? "‚úÖ ÊàêÂäü" : "‚ùå Â§±Ë¥•") << std::endl;
        
        if (factorySuccess) {
            auto registeredComponents = componentManager.GetRegisteredComponents();
            std::cout << "  Â∑≤Ê≥®ÂÜåÁªÑ‰ª∂Êï∞Èáè: " << registeredComponents.size() << std::endl;
            
            for (const auto& componentName : registeredComponents) {
                auto state = componentManager.GetComponentState(componentName);
                std::cout << "    üì¶ " << componentName << ": " << GetStateString(state) << std::endl;
            }
        }
        
        // 3. ÊµãËØïÊúçÂä°ÂÆö‰ΩçÂô®
        std::cout << "\nüîç Ê≠•È™§3: ÊúçÂä°ÂÆö‰ΩçÂô®ÊµãËØï" << std::endl;
        
        auto& serviceLocator = CHTL::Core::ServiceLocator::GetInstance();
        
        // Ê≥®ÂÜåÊµãËØïÊúçÂä°
        serviceLocator.RegisterService<CHTL::Components::UnifiedScannerComponent>(
            std::make_unique<CHTL::Components::UnifiedScannerComponent>(), "Scanner"
        );
        
        serviceLocator.RegisterService<CHTL::Components::CHTLCompilerComponent>(
            std::make_unique<CHTL::Components::CHTLCompilerComponent>(), "CHTLCompiler"
        );
        
        std::cout << "  ÊúçÂä°Ê≥®ÂÜåÊï∞Èáè: " << serviceLocator.GetServiceCount() << std::endl;
        
        // ÊµãËØïÊúçÂä°Ëé∑Âèñ
        auto scannerService = serviceLocator.GetService<CHTL::Components::UnifiedScannerComponent>();
        auto compilerService = serviceLocator.GetService<CHTL::Components::CHTLCompilerComponent>();
        
        std::cout << "  Êâ´ÊèèÂô®ÊúçÂä°: " << (scannerService ? "‚úÖ ÂèØÁî®" : "‚ùå ‰∏çÂèØÁî®") << std::endl;
        std::cout << "  ÁºñËØëÂô®ÊúçÂä°: " << (compilerService ? "‚úÖ ÂèØÁî®" : "‚ùå ‰∏çÂèØÁî®") << std::endl;
        
        // 4. ÊµãËØïÊ®°ÂùóÂåñÁºñËØëÂô®Ë∞ÉÂ∫¶Âô®
        std::cout << "\nüöÄ Ê≠•È™§4: Ê®°ÂùóÂåñÁºñËØëÂô®Ë∞ÉÂ∫¶Âô®ÊµãËØï" << std::endl;
        
        auto dispatcher = CHTL::Components::CompilerFactory::CreateModularDispatcher();
        std::cout << "  Ë∞ÉÂ∫¶Âô®ÂàõÂª∫: " << (dispatcher ? "‚úÖ ÊàêÂäü" : "‚ùå Â§±Ë¥•") << std::endl;
        
        if (dispatcher) {
            std::cout << "  Ë∞ÉÂ∫¶Âô®ÂêçÁß∞: " << dispatcher->GetComponentName() << std::endl;
            std::cout << "  Ë∞ÉÂ∫¶Âô®ÁâàÊú¨: " << dispatcher->GetComponentVersion() << std::endl;
            std::cout << "  Ë∞ÉÂ∫¶Âô®Áä∂ÊÄÅ: " << GetStateString(dispatcher->GetState()) << std::endl;
            std::cout << "  Ë∞ÉÂ∫¶Âô®ÂÅ•Â∫∑: " << (dispatcher->IsHealthy() ? "‚úÖ ÂÅ•Â∫∑" : "‚ùå ÂºÇÂ∏∏") << std::endl;
            
            auto dependencies = dispatcher->GetDependencies();
            std::cout << "  ‰æùËµñÁªÑ‰ª∂: " << dependencies.size() << " ‰∏™" << std::endl;
            for (const auto& dep : dependencies) {
                std::cout << "    ‚Ä¢ " << dep << std::endl;
            }
        }
        
        // 5. ÊµãËØïÁªÑ‰ª∂ÁîüÂëΩÂë®Êúü
        std::cout << "\nüîÑ Ê≠•È™§5: ÁªÑ‰ª∂ÁîüÂëΩÂë®ÊúüÊµãËØï" << std::endl;
        
        if (scannerService) {
            bool startSuccess = scannerService->Start();
            std::cout << "  Êâ´ÊèèÂô®ÂêØÂä®: " << (startSuccess ? "‚úÖ ÊàêÂäü" : "‚ùå Â§±Ë¥•") << std::endl;
            
            if (startSuccess) {
                scannerService->Reset();
                std::cout << "  Êâ´ÊèèÂô®ÈáçÁΩÆ: ‚úÖ ÂÆåÊàê" << std::endl;
                
                bool stopSuccess = scannerService->Stop();
                std::cout << "  Êâ´ÊèèÂô®ÂÅúÊ≠¢: " << (stopSuccess ? "‚úÖ ÊàêÂäü" : "‚ùå Â§±Ë¥•") << std::endl;
            }
        }
        
        // 6. ÁîüÊàêÊä•Âëä
        std::cout << "\nüìã Ê≠•È™§6: ÁîüÊàêÊ®°ÂùóÂåñÊû∂ÊûÑÊä•Âëä" << std::endl;
        
        std::cout << componentManager.GenerateComponentReport() << std::endl;
        std::cout << serviceLocator.GenerateServiceReport() << std::endl;
        
    }
    catch (const std::exception& e) {
        std::cout << "  ‚úó Ê®°ÂùóÂåñÊû∂ÊûÑÊµãËØïÂºÇÂ∏∏: " << e.what() << std::endl;
    }
    
    std::cout << "\nüåü Ê®°ÂùóÂåñÊû∂ÊûÑËÆæËÆ°‰ºòÂäø:" << std::endl;
    std::cout << "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" << std::endl;
    std::cout << "‚îÇ                              ‚ú® ÁªÑ‰ª∂ÂºèÁºñÁ®ã‰ºòÂäø                                              ‚îÇ" << std::endl;
    std::cout << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" << std::endl;
    std::cout << "‚îÇ üîß ÊùæËÄ¶ÂêàËÆæËÆ°: ÁªÑ‰ª∂Èó¥ÈÄöËøáÊé•Âè£‰∫§‰∫íÔºåÈôç‰Ωé‰æùËµñ                                                ‚îÇ" << std::endl;
    std::cout << "‚îÇ üîß ‰æùËµñÊ≥®ÂÖ•: ÊúçÂä°ÂÆö‰ΩçÂô®Êèê‰æõËá™Âä®‰æùËµñËß£Êûê                                                    ‚îÇ" << std::endl;
    std::cout << "‚îÇ üîß ÁîüÂëΩÂë®ÊúüÁÆ°ÁêÜ: Áªü‰∏ÄÁöÑÁªÑ‰ª∂ÂàùÂßãÂåñ„ÄÅÂêØÂä®„ÄÅÂÅúÊ≠¢ÊµÅÁ®ã                                          ‚îÇ" << std::endl;
    std::cout << "‚îÇ üîß ÂèØÊµãËØïÊÄß: ÊØè‰∏™ÁªÑ‰ª∂ÂèØÁã¨Á´ãÊµãËØïÂíåÈ™åËØÅ                                                      ‚îÇ" << std::endl;
    std::cout << "‚îÇ üîß ÂèØÊâ©Â±ïÊÄß: Êñ∞ÁªÑ‰ª∂ÂèØËΩªÊùæÊ≥®ÂÜåÂíåÈõÜÊàê                                                        ‚îÇ" << std::endl;
    std::cout << "‚îÇ üîß ÂèØÁª¥Êä§ÊÄß: Ê∏ÖÊô∞ÁöÑÁªÑ‰ª∂ËæπÁïåÂíåËÅåË¥£ÂàÜÁ¶ª                                                      ‚îÇ" << std::endl;
    std::cout << "‚îÇ üîß ÈîôËØØÈöîÁ¶ª: ÁªÑ‰ª∂ÂºÇÂ∏∏‰∏ç‰ºöÂΩ±ÂìçÂÖ∂‰ªñÁªÑ‰ª∂                                                      ‚îÇ" << std::endl;
    std::cout << "‚îÇ üîß ÈÖçÁΩÆÁÆ°ÁêÜ: Áªü‰∏ÄÁöÑÁªÑ‰ª∂ÈÖçÁΩÆÂíåÁä∂ÊÄÅÁÆ°ÁêÜ                                                      ‚îÇ" << std::endl;
    std::cout << "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" << std::endl;
    
    std::cout << "\nüèÜ Ê®°ÂùóÂåñÊû∂ÊûÑÊµãËØïÂÆåÊàêÔºÅ" << std::endl;
    std::cout << "CHTLÁºñËØëÂô®Áé∞Âú®ÈááÁî®‰∫ÜÁúüÊ≠£ÁöÑÊ®°ÂùóÂåñËÆæËÆ°ÂíåÁªÑ‰ª∂ÂºèÁºñÁ®ãÊû∂ÊûÑ„ÄÇ" << std::endl;
    
    return 0;
}

// ËæÖÂä©ÂáΩÊï∞
std::string GetStateString(CHTL::Core::ComponentState state) {
    switch (state) {
        case CHTL::Core::ComponentState::UNINITIALIZED: return "Êú™ÂàùÂßãÂåñ";
        case CHTL::Core::ComponentState::INITIALIZING: return "ÂàùÂßãÂåñ‰∏≠";
        case CHTL::Core::ComponentState::INITIALIZED: return "Â∑≤ÂàùÂßãÂåñ";
        case CHTL::Core::ComponentState::RUNNING: return "ËøêË°å‰∏≠";
        case CHTL::Core::ComponentState::STOPPED: return "Â∑≤ÂÅúÊ≠¢";
        case CHTL::Core::ComponentState::ERROR_STATE: return "ÈîôËØØÁä∂ÊÄÅ";
        default: return "Êú™Áü•Áä∂ÊÄÅ";
    }
}